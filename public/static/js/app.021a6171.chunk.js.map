{"version":3,"sources":["config/firebase.js","Actions.js","DatabaseRDB.js","DatabaseFS.js","Database.js","Search.js","Controller.js","MyButtons.js","BottomBar.js","MessageUtils.js","Toolbar.js","UIConstants.js","DebugScreen.js","ErrorScreen.js","NewSchoolGroupModal.js","Portal.js","TopBar.js","TopBarLeftContentSideButton.js","TopBarMiddleContentSideButtons.js","UserInfo.js","NewPrivateGroupModal.js","Utils.js","Globals.js","FindGroupsScreen.js","GroupInviteModal.js","GroupMembersModal.js","MessageTime.js","MessageView.js","ThreadMessageModal.js","CommentView.js","MessageScreen.js","MessageModal.js","NewEventModal.js","FacePile.js","GroupScreen.js","GroupsScreen.js","InitialChooseSchoolsWizard.js","InitialJoinSchoolGroupsScreen.js","LoginScreen.js","Messages.js","MyProfileModal.js","MyProfileScreen.js","NewOrgGroupModal.js","OrgScreen.js","PostScreen.js","SchoolScreen.js","SignupScreen.js","SplashScreen.js","UserScreen.js","RootApp.js","App.js","node_modules/moment/locale sync /^/.//.*$"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","rdb","getDatabase","storage","getStorage","screenSlice","createSlice","name","initialState","screen","modal","userScreen","reducers","goToScreen","state","payload","postLoginScreen","openModal","closeModal","goToUserScreen","mainSlice","userInfo","orgsList","orgMap","groupIds","groupMap","groupMembershipMap","userMap","userList","userGroupMemberships","groupMessages","pushToken","toUserInvites","userMessagesMap","unreadMessages","appInitialized","obj","newUserMap","uid","clearUserData","locationDataInit","orgs","groups","users","groupMemberships","user","push","id","groupList","group","groupMembership","groupId","orgsMap","org","token","orderedMessages","messages","sort","message1","message2","timestamp","userMessages","message","filter","orgsUpdated","searchIndex","actions","configureStore","goToScreenAfterLogin","reducer","main","middleware","observers","getAllOrgs","a","async","dbRef","RDB","orgsRDB","ret","toArray","val","updateOrCreateUser","data","userRef","userSnapshot","exists","getAllGroups","getAllUsers","getAllGroupMemberships","snapshot","observeAllGroupMembershipChangesHelper","callback","userCallback","ref","unsubscribe","createGroup","newReference","key","joinGroup","createOrg","type","updateUserGroupMembership","userGroupMembershipId","updateObj","docRef","updateUserMessage","messageId","update","updateGroup","updateUser","array","Object","entries","value","observeToUserInvites","toUid","toEmail","snapshotQuery","query","collection","where","onSnapshot","list","docs","map","doc","sendMessage","title","text","papaId","notificationInfo","Timestamp","now","toDate","messagesRef","addDoc","createInvite","fromUid","email","invitesRef","status","updateInvite","inviteId","setDoc","merge","observeOrgChanges","schoolsRef","DatabaseRDB","observeUserMessages","userMessagesRef","observeUserChanges","observeAllGroupChanges","groupsRef","observeAllGroupMembershipChanges","observeUserGroupMemberships","observeGroupMessages","toMillis","DatabaseFS","userId","buildSearchIndex","groupsMap","searchWordIndex","keys","splitIntoWords","addIntoMap","entity","orgId","groupWords","orgWords","concat","searchTree","subTree","x","entities","parent","y","str","split","current","c","isAlphaNumericCharacter","toUpperCase","code","charCodeAt","findInIndex","index","word","ch","groupMessageSubscriptions","dispatch","notificationListener","responseListener","Actions","Database","registerForPushNotificationsAsync","then","console","log","catch","error","notificationReceivedListener","Notifications","notification","notificationResponseReceivedListener","response","unsubscribeAuth","onAuthStateChanged","authenticatedUser","JSON","stringify","loggedIn","loggedOut","Search","store","getState","remove","userData","displayName","photoURL","undefined","forEach","messagesSnapshot","invites","createSchoolGroupAndJoin","schoolId","groupName","grade","year","markMessagesRead","messageIds","createPrivateGroupAndJoin","invitees","emailInvitees","inviteeUid","sendGroupInviteToUser","inviteeEmail","sendGroupInviteToEmail","createOrgGroupAndJoin","sendReply","sendEventMessage","startDate","endDate","event","sendEventReply","logout","signOut","Device","existingStatus","finalStatus","alert","Platform","OS","importance","MAX","vibrationPattern","lightColor","joinGroupFromInvite","dismissInvite","searchGroupsAndOrgs","results","wordResults","entityMap","occurrences","reduce","acc","result","maxCountResults","maxCount","entityId","count","setUserGroupLastViewedTimestamp","lastViewedMessageTimestamp","gm","userGroupMembership","length","saveProfile","firstName","lastName","image","profileInitialized","deleteGroup","MenuButton","React","memo","icon","onPress","color","badge","TouchableOpacity","View","style","flexDirection","alignItems","marginLeft","marginRight","fontSize","Text","FormButton","flex","marginBottom","alignSelf","labelStyle","uppercase","mode","LinkButton","textDecorationLine","StyleSheet","create","container","children","height","paddingTop","paddingBottom","justifyContent","child","buildMessageWithChildren","groupMembers","rootMessage","m","rootMessageWithStatus","addMeta","addEventData","unreadChildCount","childMessage","childStatus","childMessageUser","lastUpdated","Math","max","apply","eventWithUserStatus","childEvent","userStatus","summary","statusCount","selected","useDispatch","useSelector","groupMessagesMap","userMessage","MessageUtils","backgroundColor","containerStyle","position","top","right","backAction","DebugScreen","schoolList","schoolMap","useState","setAddSchoolDisabled","newSchoolName","setNewSchoolName","SafeAreaView","grow","fontWeight","TextInput","borderWidth","width","placeholder","onChangeText","disabled","user_group_memberships","ErrorScreen","resetErrorBoundary","stack","NewSchoolGroupModal","visible","onCreateGroup","gradeSelection","setGradeSelection","yearSelection","setYearSelection","setGroupName","processing","setProcessing","Modal","animationType","compact","selectTextOnFocus","Portal","insets","useSafeAreaInsets","flexGrow","paddingLeft","left","paddingRight","bottom","center","leftWidth","flexBasis","content","side","chatDisplayName","avatarColor","hash","i","avatarComponent","avatar","uri","borderRadius","size","rounded","charAt","smallAvatarComponent","border","borderColor","letters","NewPrivateGroupModal","groupDescription","setGroupDescription","inviteByEmail","setInviteByEmail","setInvitees","invitesByEmailList","setInvitesByEmailList","addList","keyFunc","Set","e","has","add","Utils","TopBarMiddleContentSideButtons","padding","ScrollView","alignContent","checked","includes","newInviteeList","UserInfo","autoCapitalize","newList","FindGroupsScreens","navigation","searchResults","setSearchResults","otherOrgsList","searchText","setSearchText","newPrivateGroupModalVisible","setNewPrivateGroupModalVisible","Controller","platform","round","searchIcon","onClear","textAlign","searchResultsSection","marginTop","b","localeCompare","school","directorySection","GroupInviteModal","onInvite","setEmail","GroupMembersModal","members","inviteModalVisible","setInviteModalVisible","memberComponents","Alert","textStyle","messageTime","moment","Date","setNow","diffInSeconds","diff","format","useEffect","interval","setInterval","clearInterval","MessageView","item","numberOfLines","ellipsizeMode","replace","accepted","declined","not_responded","ThreadMessageModal","showModal","setText","setTitle","margin","multiline","autoFocus","CommentView","timeAgo","date","createdAt","component","MessageScreen","onBack","userinfo","useWindowDimensions","windowWidth","sortedChildMessages","m1","m2","childMessages","_id","useCallback","fromName","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","IconButton","MessagesContainer","MessageModal","EventMessageModal","scrollViewRef","scrollToEnd","animated","useRef","Dimensions","get","markRead","unreadChildMessages","KeyboardAvoidingView","behavior","keyboardVerticalOffset","enabled","calendars","showCalendarSelection","setShowCalendarSelection","absoluteFill","calendar","source","dateMs","parse","Calendar","timeZone","location","eventId","createEvent","NewEventModal","sendEvent","setDate","startTime","setStartTime","endTime","setEndTime","showDatePicker","setShowDatePicker","showStartTimePicker","setShowStartTimePicker","showEndTimePicker","setShowEndTimePicker","set","month","hour","minute","display","onChange","selectedDate","currentDate","FacePile","userIds","components","zIndex","GroupScreen","membersModalVisible","setMembersModalVisible","messagesModalVisible","setMessagesModalVisible","showNewMessageModal","setShowNewMessageModal","showNewEventModal","setShowNewEventModal","rootMessages","messageMap","values","papaMessage","sortedMessages","maxTimestampMessage","prev","topBarHeight","FlatList","renderItem","keyExtractor","ItemSeparatorComponent","flag","GroupsScreen","groupsComponents","inviteees","InitialChooseSchoolsWizard","schoolListSorted","s1","s2","section","schoolSelection","setSchoolSelection","schoolSection","checkedIcon","uncheckedIcon","newSchoolSelection","schools","profile","InitialJoinSchoolGroupsScreen","visibleSchoolGroupModal","setVisibleSchoolGroupModal","userSchools","userGroupMembershipList","schoolsComponents","school_id","joinGroupComponents","Login","afterLoginScreen","useAuthState","loading","password","setPassword","ActivityIndicator","animating","styles","input","keyboardType","textContentType","autoCorrect","secureTextEntry","signInWithEmailAndPassword","userCredential","err","paddingHorizontal","Messages","props","invite","MyProfileModal","ModalContainer","setFirstName","setLastName","editingImage","uploading","setUploading","setImage","_handleImagePicked","pickerResult","cancelled","uploadImageAsync","uploadUrl","ImagePicker","allowsEditing","aspect","_maybeRenderUploadingOverlay","Promise","resolve","reject","xhr","XMLHttpRequest","onload","onerror","TypeError","responseType","open","send","blob","fileRef","uuid","v4","uploadBytes","close","getDownloadURL","MyProfileScreen","mySchools","mySchoolComponents","NewOrgGroupModal","OrgScreen","orgGroups","visibleOrgGroupModal","setVisibleOrgGroupModal","PostScreen","SchoolScreen","schoolGroups","Signup","confirmPassword","setConfirmPassword","setError","createUserWithEmailAndPassword","SplashScreen","appInitializedCallback","refresh","readyRef","UserScreen","screenWithParams","RootApp","appState","lastNotificationResponse","request","modalWithParams","render","App","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","module","exports"],"mappings":"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","file":"static/js/app.021a6171.chunk.js","sourcesContent":["import { getDatabase } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getStorage } from \"firebase/storage\";\n//import { getFirestore } from \"firebase/firestore/lite\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// Firebase config\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyD7sAZY_oPEoAhPLbLST23DAAmAPiOh8V8\",\n  authDomain: \"parents-749dd.firebaseapp.com\",\n  databaseURL: \"https://parents-749dd-default-rtdb.firebaseio.com\",\n  projectId: \"parents-749dd\",\n  storageBucket: \"parents-749dd.appspot.com\",\n  messagingSenderId: \"202897799240\",\n  appId: \"1:202897799240:web:6e7181665de58029cfc07d\",\n  measurementId: \"G-RJ6EY4S9LJ\",\n};\n\n// initialize firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const rdb = getDatabase(app);\nexport const storage = getStorage(app);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  Timestamp,\n  //} from \"firebase/firestore/lite\";\n} from \"firebase/firestore\";\n\nexport const screenSlice = createSlice({\n  name: \"screen\",\n  initialState: {\n    screen: {\n      screen: null,\n    },\n    modal: {\n      modal: null,\n    },\n    userScreen: {\n      screen: null,\n    },\n  },\n  reducers: {\n    goToScreen: (state, screen) => {\n      const newState = {\n        ...state,\n        screen: screen.payload,\n        postLoginScreen: null,\n      };\n      return newState;\n    },\n    openModal: (state, modal) => {\n      const newState = {\n        ...state,\n        modal: modal.payload,\n      };\n      return newState;\n    },\n    closeModal: (state, modal) => {\n      const newState = {\n        ...state,\n        modal: null,\n      };\n      return newState;\n    },\n    goToUserScreen: (state, screen) => {\n      const newState = {\n        ...state,\n        userScreen: screen.payload,\n      };\n      return newState;\n    },\n  },\n});\n\nexport const mainSlice = createSlice({\n  name: \"main\",\n  initialState: {\n    userInfo: null,\n    orgsList: null,\n    orgMap: null,\n    groupIds: null,\n    groupMap: null,\n    groupMembershipMap: null,\n    userMap: null,\n    userList: null,\n    userGroupMemberships: null,\n    groupMessages: {},\n    pushToken: null,\n    toUserInvites: null,\n    userMessagesMap: null,\n    unreadMessages: [],\n  },\n  reducers: {\n    appInitialized: (state, obj) => {\n      const newState = {\n        ...state,\n        appInitialized: true,\n      };\n      return newState;\n    },\n    userInfo: (state, obj) => {\n      const userInfo = obj.payload;\n      const newUserMap = { ...state.userMap };\n      newUserMap[userInfo.uid] = userInfo;\n      const newState = {\n        ...state,\n        userInfo,\n        userMap: newUserMap,\n      };\n      return newState;\n    },\n    clearUserData: (state, obj) => {\n      const newState = {\n        ...state,\n        userInfo: null,\n      };\n      return newState;\n    },\n    locationDataInit: (state, obj) => {\n      const { orgs, groups, users, groupMemberships } = obj.payload;\n\n      //users\n      const userList = [];\n      const userMap = {};\n      for (const user of users) {\n        userList.push(user);\n        userMap[user.id] = user;\n      }\n\n      //groups\n      const groupList = [];\n      const groupMap = {};\n      for (const group of groups) {\n        groupList.push(group);\n        groupMap[group.id] = group;\n      }\n\n      //groupMemberships\n      const groupMembershipMap = {};\n      for (const groupMembership of groupMemberships) {\n        !(groupMembership.groupId in groupMembershipMap)\n          ? (groupMembershipMap[groupMembership.groupId] = [groupMembership])\n          : groupMembershipMap[groupMembership.groupId].push(groupMembership);\n      }\n\n      //orgs\n      const orgsList = [];\n      const orgsMap = {};\n      for (const org of orgs) {\n        orgsList.push(org);\n        orgsMap[org.id] = org;\n      }\n\n      const newState = {\n        ...state,\n        userList,\n        userMap,\n        groupList,\n        groupMap,\n        orgsList,\n        orgsMap,\n        groupMembershipMap,\n      };\n      return newState;\n    },\n    pushToken: (state, obj) => {\n      const { token } = obj.payload;\n\n      const newState = {\n        ...state,\n        pushToken: token,\n      };\n      return newState;\n    },\n    userGroupMemberships: (state, obj) => {\n      const userGroupMemberships = obj.payload;\n      const newState = {\n        ...state,\n        userGroupMemberships,\n      };\n      return newState;\n    },\n    groupMessages: (state, obj) => {\n      const { groupId, messages } = obj.payload;\n      const orderedMessages = messages.sort((message1, message2) => {\n        return message2.timestamp - message1.timestamp;\n      });\n      const groupMessages = { ...state.groupMessages };\n      groupMessages[groupId] = orderedMessages;\n\n      const newState = {\n        ...state,\n        groupMessages,\n      };\n      return newState;\n    },\n    userMessages: (state, obj) => {\n      const messages = obj.payload;\n      const userMessagesMap = { ...state.userMessagesMap };\n      for (const message of messages) {\n        userMessagesMap[message.id] = message;\n      }\n      return {\n        ...state,\n        userMessagesMap,\n      };\n    },\n    groups: (state, obj) => {\n      let groups = obj.payload;\n      groups = groups.filter((group) => group != null /* && group.status != \"deleted\"*/);\n      const groupList = [];\n      const groupMap = {};\n      for (const group of groups) {\n        groupList.push(group);\n        groupMap[group.id] = group;\n      }\n      const newState = {\n        ...state,\n        groupList,\n        groupMap,\n      };\n      return newState;\n    },\n    groupMemberships: (state, obj) => {\n      const groupMemberships = obj.payload;\n      const groupMembershipMap = {};\n      for (const groupMembership of groupMemberships) {\n        !(groupMembership.groupId in groupMembershipMap)\n          ? (groupMembershipMap[groupMembership.groupId] = [groupMembership])\n          : groupMembershipMap[groupMembership.groupId].push(groupMembership);\n      }\n      const newState = {\n        ...state,\n        groupMembershipMap,\n      };\n      return newState;\n    },\n    orgsUpdated: (state, obj) => {\n      const orgs = obj.payload;\n      const orgsList = [];\n      const orgsMap = {};\n      for (const org of orgs) {\n        orgsList.push(org);\n        orgsMap[org.id] = org;\n      }\n\n      const newState = {\n        ...state,\n        orgsList,\n        orgsMap,\n      };\n      return newState;\n    },\n    toUserInvites: (state, obj) => {\n      const toUserInvites = obj.payload;\n      const newState = {\n        ...state,\n        toUserInvites,\n      };\n      return newState;\n    },\n    searchIndex: (state, obj) => {\n      const searchIndex = obj.payload;\n      const newState = {\n        ...state,\n        searchIndex,\n      };\n      return newState;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  appInitialized,\n  pushToken,\n  userInfo,\n  locationDataInit,\n  orgsUpdated,\n  userGroupMemberships,\n  groupMessages,\n  groups,\n  groupMemberships,\n  toUserInvites,\n  searchIndex,\n  userMessages,\n  clearUserData,\n} = mainSlice.actions;\nexport const { goToScreen, openModal, closeModal, goToUserScreen, goToScreenAfterLogin } =\n  screenSlice.actions;\n\nexport default configureStore({\n  reducer: {\n    main: mainSlice.reducer,\n    screen: screenSlice.reducer,\n  },\n  middleware: [],\n});\n","import * as RDB from \"firebase/database\";\nimport { rdb } from \"./config/firebase\";\n\nconst observers = {};\n\nexport async function getAllOrgs() {\n  /*real-time database */\n  const dbRef = RDB.ref(rdb);\n  const orgsRDB = await RDB.get(RDB.child(dbRef, \"orgs\"));\n\n  const ret = toArray(orgsRDB.val());\n  return ret;\n}\n\nexport function observeOrgChanges(callback) {\n  //rdb\n  const schoolsRef = RDB.ref(rdb, \"orgs\");\n  RDB.onValue(schoolsRef, (snapshot) => {\n    const data = snapshot.val();\n    const ret = toArray(data);\n    callback(ret);\n  });\n}\n\nexport function observeUserMessages(uid, callback) {\n  const userMessagesRef = RDB.ref(rdb, \"user_messages/\" + uid);\n  RDB.onValue(userMessagesRef, (snapshot) => {\n    const data = snapshot.val();\n    const ret = toArray(data);\n    callback(ret);\n  });\n}\n\nexport async function updateOrCreateUser(uid, data) {\n  const dbRef = RDB.ref(rdb);\n  const userRef = RDB.child(dbRef, \"users/\" + uid);\n  const userSnapshot = await RDB.get(userRef);\n  if (userSnapshot.exists()) {\n    await RDB.update(userRef, data);\n    return { ...userSnapshot.val(), ...data };\n  } else {\n    await RDB.set(userRef, data);\n    return data;\n  }\n  const userInfo = data;\n  return userInfo;\n}\n\nexport async function updateUserAddToArrayField(uid, fieldName, value) {\n  const dbRef = RDB.ref(rdb);\n  const userRef = RDB.child(dbRef, \"users/\" + uid);\n  const userSnapshot = await RDB.get(userRef);\n  const currentArray = userSnapshot.val()[fieldName] ?? [];\n  const newArray = currentArray.concat(value);\n  const update = {};\n  update[fieldName] = newArray;\n  await RDB.update(userRef, update);\n}\n\nexport function observeUserChanges(uid, callback) {\n  //realtime-database\n  const userRef = RDB.ref(rdb, \"users/\" + uid);\n  RDB.onValue(userRef, (snapshot) => {\n    const userInfo = snapshot.val();\n    callback(userInfo);\n  });\n}\n\nexport async function getAllGroups() {\n  /*real-time database */\n  const dbRef = RDB.ref(rdb);\n  const groups = await RDB.get(RDB.child(dbRef, \"groups\"));\n\n  const ret = toArray(groups.val());\n  return ret;\n}\n\nexport function observeAllGroupChanges(callback) {\n  //rdb\n  const groupsRef = RDB.ref(rdb, \"groups\");\n  const unsubscribe = RDB.onValue(groupsRef, (snapshot) => {\n    const data = snapshot.val();\n    const ret = toArray(data);\n    callback(ret);\n  });\n}\n\nexport async function getAllUsers() {\n  /*real-time database */\n  const dbRef = RDB.ref(rdb);\n  const users = await RDB.get(RDB.child(dbRef, \"users\"));\n\n  const ret = toArray(users.val() ?? []);\n  //const ret = toArray(null);\n  return ret;\n}\n\nexport function observeAllUserChanges(callback) {\n  //rdb\n  const usersRef = RDB.ref(rdb, \"users\");\n  RDB.onValue(usersRef, (snapshot) => {\n    const data = snapshot.val();\n    const ret = toArray(data);\n    callback(ret);\n  });\n}\n\nexport async function getAllGroupMemberships() {\n  /*real-time database */\n  const dbRef = RDB.ref(rdb);\n  const snapshot = await RDB.get(RDB.child(dbRef, \"group_memberships\"));\n  const ret = toArray(snapshot.val());\n  return ret;\n}\n\nfunction observeAllGroupMembershipChangesHelper(callback, uid, userCallback) {\n  const ref = RDB.ref(rdb, \"group_memberships\");\n  const unsubscribe = RDB.onValue(ref, (snapshot) => {\n    const data = snapshot.val();\n    const ret = toArray(data);\n    callback(ret);\n    if (uid != null) {\n      const userGroupMemberships = ret.filter((groupMembership) => groupMembership.uid == uid);\n      userCallback(userGroupMemberships);\n    }\n  });\n  observers[\"observeAllGroupChanges\"] = {\n    callback,\n    uid,\n    userCallback,\n    unsubscribe,\n  };\n}\n\nexport function observeAllGroupMembershipChanges(callback) {\n  let uid = null;\n  let userCallback = null;\n  if (observers[\"observeAllGroupChanges\"] != null) {\n    uid = observers[\"observeAllGroupChanges\"][\"uid\"];\n    userCallback = observers[\"observeAllGroupChanges\"][\"userCallback\"];\n  }\n  observeAllGroupMembershipChangesHelper(callback, uid, userCallback);\n}\n\nexport function observeUserGroupMemberships(uid, userCallback) {\n  let callback = null;\n  if (observers[\"observeAllGroupChanges\"] != null) {\n    callback = observers[\"observeAllGroupChanges\"][\"callback\"];\n  }\n  observeAllGroupMembershipChangesHelper(callback, uid, userCallback);\n}\n\nexport function observeGroupMessages(groupId, callback) {}\n\nexport async function createGroup(data) {\n  const newReference = await RDB.push(RDB.ref(rdb, \"/groups\"));\n  await RDB.set(newReference, data);\n  return newReference.key;\n}\n\nexport async function joinGroup(userInfo, groupId) {\n  const newReference = await RDB.push(RDB.ref(rdb, \"/group_memberships\"));\n  await RDB.set(newReference, { uid: userInfo.uid, groupId });\n  return newReference.key;\n}\n\nexport async function createOrg(name, type) {\n  const newReference = await RDB.push(RDB.ref(rdb, \"/orgs\"));\n  await RDB.set(newReference, { name, type });\n  return newReference.key;\n}\n\nexport async function updateUserGroupMembership(userGroupMembershipId, updateObj) {\n  const docRef = RDB.ref(rdb, \"/group_memberships/\" + userGroupMembershipId);\n  await RDB.update(docRef, updateObj);\n}\n\nexport async function updateUserMessage(uid, messageId, update) {\n  const docRef = RDB.ref(rdb, \"/user_messages/\" + uid + \"/\" + messageId);\n  await RDB.update(docRef, update);\n}\n\nexport async function updateGroup(groupId, update) {\n  const docRef = RDB.ref(rdb, \"/groups/\" + groupId);\n  await RDB.update(docRef, update);\n}\n\nexport async function updateUser(uid, update) {\n  const docRef = RDB.ref(rdb, \"/users/\" + uid);\n  await RDB.update(docRef, update);\n}\n\nexport async function logError(error, info) {\n  const newReference = await RDB.push(RDB.ref(rdb, \"/errors\"));\n  await RDB.set(newReference, { error: error.message, stack: error.stack });\n  return newReference.key;\n}\n\nfunction toArray(obj) {\n  if (obj == null) {\n    return [];\n  }\n  const array = [];\n  for (const [key, value] of Object.entries(obj)) {\n    array.push({ id: key, ...value });\n  }\n  return array;\n}\n","import {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  onSnapshot,\n  setDoc,\n  where,\n  query,\n  Timestamp,\n} from \"firebase/firestore\";\nimport { db } from \"./config/firebase\";\n\nexport async function getAllSchools() {\n  /* firestore */\n  const schoolsSnapshot = await getDocs(collection(db, \"schools\"));\n  const schools = [];\n  schoolsSnapshot.forEach((doc) => {\n    schools.push({ id: doc.id, ...doc.data() });\n  });\n  return schools;\n}\n\nexport function observeSchoolChanges(callback) {\n  //firestores\n  var schoolQuery = onSnapshot(\n    collection(db, \"schools\"),\n    (docsSnapshot) => {\n      const schools = docsSnapshot.docs.map((doc) => {\n        return { id: doc.id, ...doc.data() };\n      });\n      callback(schools);\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n}\n\nexport async function updateOrCreateUser(uid, data) {\n  //firebase\n  const docRef = doc(db, \"users\", uid);\n  const docSnap = await getDoc(docRef);\n  let userDoc = null;\n  let userInfo = null;\n\n  // get or create the user info objet\n  if (docSnap.exists()) {\n    //update with latest push token\n    const userRef = doc(collection(db, \"users\"), uid);\n    //userInfo = { id: docSnap.id, ...docSnap.data() };\n    userDoc = await setDoc(\n      userRef,\n      //   {\n      //     pushToken: pushToken == undefined ? null : pushToken,\n      //   },\n      data,\n      { merge: true }\n    );\n    userInfo = data;\n  } else {\n    userDoc = await setDoc(doc(db, \"users\", uid), data);\n    userInfo = data;\n  }\n  return userInfo;\n}\n\nexport function observeUserChanges(uid, callback) {\n  //firebase\n  const userDocRef = doc(db, \"users\", uid);\n  onSnapshot(\n    userDocRef,\n    (doc) => {\n      const data = doc.data();\n      userInfo = { id: doc.id, ...data };\n      callback(userInfo);\n    },\n    (err) => {\n      console.log(\"encountered error\");\n    }\n  );\n}\n\nexport async function getAllGroups() {\n  const groupsSnapshot = await getDocs(collection(db, \"groups\"));\n  const groups = [];\n  groupsSnapshot.forEach((doc) => {\n    groups.push(doc.data());\n  });\n  return groups;\n}\n\nexport function observeAllGroupChanges(callback) {\n  //rdb\n  const groupsCollectionRef = collection(db, \"groups\");\n  onSnapshot(groupsCollectionRef, (groupsSnapshot) => {\n    const groupDocs = [];\n    groupsSnapshot.forEach((group) => {\n      const data = group.data();\n      groupDocs.push({\n        id: group.id,\n        name: data.name,\n        schoolId: data.schoolId,\n      });\n    });\n    callback(groupDocs);\n  });\n}\n\nexport async function getAllUsers() {\n  const usersSnapshot = await getDocs(collection(db, \"users\"));\n  const users = [];\n  usersSnapshot.forEach((doc) => {\n    users.push({ id: doc.id, ...doc.data() });\n  });\n  return groups;\n}\n\nexport function observeAllUserChanges(callback) {\n  //rdb\n  const usersRef = collection(db, \"users\");\n  onSnapshot(usersRef, (usersSnapshot) => {\n    const users = [];\n    usersSnapshot.forEach((userSnapshot) => {\n      const data = userSnapshot.data();\n      users.push({\n        id: userSnapshot.id,\n        ...data,\n      });\n    });\n    callback(users);\n  });\n}\n\nexport async function getAllGroupMemberships() {\n  const groupMembershipsSnapshot = await getDocs(\n    collection(db, \"group_memberships\")\n  );\n  const group_memberships = [];\n  groupMembershipsSnapshot.forEach((doc) => {\n    group_memberships.push({ id: doc.id, ...doc.data() });\n  });\n  return group_memberships;\n}\n\nexport function observeAllGroupMembershipChanges(callback) {\n  //rdb\n  const ref = collection(db, \"group_memberships\");\n  onSnapshot(usersRef, (snapshot) => {\n    const arr = [];\n    snapshot.forEach((docSnapshot) => {\n      const data = docSnapshot.data();\n      arr.push({\n        id: userSnapshot.id,\n        ...data,\n      });\n    });\n    callback(arr);\n  });\n}\n\nexport function observeUserGroupMemberships(uid, callback) {\n  const snapshotQuery = query(\n    collection(db, \"group_memberships\"),\n    where(\"uid\", \"==\", uid)\n  );\n\n  onSnapshot(snapshotQuery, (snapshot) => {\n    const list = snapshot.docs.map((doc) => {\n      return { id: doc.id, ...doc.data() };\n    });\n    callback(list);\n  });\n}\n\nexport function observeToUserInvites(toUid, toEmail, callback) {\n  const snapshotQuery = query(\n    collection(db, \"invites\"),\n    where(\"toUid\", \"in\", [\"_uid_\" + toUid, \"_email_\" + toEmail]),\n    where(\"status\", \"==\", \"new\")\n  );\n\n  onSnapshot(snapshotQuery, (snapshot) => {\n    const list = snapshot.docs.map((doc) => {\n      const data = doc.data();\n      return { id: doc.id, ...data };\n    });\n    callback(list);\n  });\n}\n\nexport function observeGroupMessages(groupId, callback) {\n  const ref = collection(doc(collection(db, \"groups\"), groupId), \"messages\");\n  return onSnapshot(ref, (snapshot) => {\n    const list = snapshot.docs.map((doc) => {\n      const data = doc.data();\n      const message = {\n        id: doc.id,\n        title: data.title,\n        text: data.text,\n        uid: data.uid,\n        timestamp: data.timestamp.toMillis(),\n        papaId: data.papaId,\n        ...data,\n      };\n      return message;\n    });\n    callback(list);\n  });\n}\n\nexport async function joinGroup(userInfo, groupId) {\n  const groupMembershipCollectionRef = collection(db, \"group_memberships\");\n  const existingGroupMembershipQuery = query(\n    groupMembershipCollectionRef,\n    where(\"uid\", \"==\", userInfo.uid),\n    where(\"groupId\", \"==\", groupId)\n  );\n\n  const existingGroupMembershipSnapshot = await getDocs(\n    existingGroupMembershipQuery\n  );\n\n  console.log(\n    \"existing memberships: \" + existingGroupMembershipSnapshot.docs.length\n  );\n  if (existingGroupMembershipSnapshot.docs.length == 0) {\n    const membership = { uid: userInfo.uid, groupId: groupId };\n    await addDoc(groupMembershipCollectionRef, membership);\n  }\n}\n\nexport async function createGroup(data) {\n  const groupsRef = collection(db, \"groups\");\n  const group = await addDoc(groupsRef, data);\n}\n\nexport async function sendMessage(\n  groupId,\n  uid,\n  title,\n  text,\n  data,\n  papaId,\n  notificationInfo\n) {\n  const message = {\n    uid: uid,\n    groupId,\n    title,\n    text,\n    ...data,\n    papaId,\n    timestamp: Timestamp.now().toDate(),\n    notificationInfo,\n  };\n  const messagesRef = collection(\n    doc(collection(db, \"groups\"), groupId),\n    \"messages\"\n  );\n  return await addDoc(messagesRef, message);\n}\n\nexport async function createInvite(fromUid, groupId, uid, email) {\n  const invitesRef = collection(db, \"invites\");\n  const group = await addDoc(invitesRef, {\n    fromUid,\n    groupId,\n    toUid: uid != null ? \"_uid_\" + uid : \"_email_\" + email,\n    status: \"new\",\n  });\n}\n\nexport async function createEvent(\n  uid,\n  groupId,\n  title,\n  text,\n  startDate,\n  endDate\n) {\n  console.log(\n    \"create event: \" +\n      uid +\n      \", \" +\n      groupId +\n      \", \" +\n      title +\n      \", \" +\n      text +\n      startDate +\n      \", \" +\n      endDate\n  );\n  const eventsRef = collection(db, \"events\");\n  const event = await addDoc(eventsRef, {\n    uid,\n    groupId,\n    title,\n    text,\n    startDate,\n    endDate,\n  });\n  return event.id;\n}\n\nexport async function updateInvite(inviteId, update) {\n  const docRef = doc(collection(db, \"invites\"), inviteId);\n  await setDoc(docRef, update, { merge: true });\n}\n","import * as DatabaseRDB from \"./DatabaseRDB\";\nimport * as DatabaseFS from \"./DatabaseFS\";\n\nexport async function getAllOrgs() {\n  return DatabaseRDB.getAllOrgs();\n}\n\nexport function observeOrgChanges(callback) {\n  return DatabaseRDB.observeOrgChanges(callback);\n}\n\nexport function observeUserMessages(uid, callback) {\n  return DatabaseRDB.observeUserMessages(uid, callback);\n}\n\nexport async function updateOrCreateUser(uid, data) {\n  return DatabaseRDB.updateOrCreateUser(uid, data);\n}\n\nexport async function updateUserAddToArrayField(uid, fieldName, value) {\n  return DatabaseRDB.updateUserAddToArrayField(uid, fieldName, value);\n}\n\nexport function observeUserChanges(uid, callback) {\n  return DatabaseRDB.observeUserChanges(uid, callback);\n}\n\nexport async function getAllGroups() {\n  return DatabaseRDB.getAllGroups();\n}\n\nexport function observeAllGroupChanges(callback) {\n  return DatabaseRDB.observeAllGroupChanges(callback);\n}\n\nexport async function getAllUsers() {\n  return DatabaseRDB.getAllUsers();\n}\n\nexport function observeAllUserChanges(callback) {\n  return DatabaseRDB.observeAllUserChanges(callback);\n}\n\nexport async function getAllGroupMemberships() {\n  return DatabaseRDB.getAllGroupMemberships();\n}\n\nexport function observeAllGroupMembershipChanges(callback) {\n  return DatabaseRDB.observeAllGroupMembershipChanges(callback);\n}\n\nexport function observeUserGroupMemberships(uid, callback) {\n  return DatabaseRDB.observeUserGroupMemberships(uid, callback);\n}\n\nexport function observeGroupMessages(groupId, callback) {\n  return DatabaseFS.observeGroupMessages(groupId, callback);\n}\n\nexport async function joinGroup(userInfo, groupId) {\n  return DatabaseRDB.joinGroup(userInfo, groupId);\n}\n\nexport async function createGroup(data) {\n  return DatabaseRDB.createGroup(data);\n}\n\nexport async function updateGroup(groupId, data) {\n  return DatabaseRDB.updateGroup(groupId, data);\n}\n\nexport async function sendMessage(groupId, uid, title, text, data, papaId, notificationInfo) {\n  return DatabaseFS.sendMessage(groupId, uid, title, text, data, papaId, notificationInfo);\n}\n\nexport async function createOrg(name, type) {\n  return DatabaseRDB.createOrg(name, type);\n}\n\nexport async function createInvite(fromUid, groupId, uid, email) {\n  return DatabaseFS.createInvite(fromUid, groupId, uid, email);\n}\n\nexport async function createEvent(uid, groupId, title, text, startDate, endDate) {\n  return DatabaseFS.createEvent(uid, groupId, title, text, startDate, endDate);\n}\n\nexport async function observeToUserInvites(toUid, toEmail, callback) {\n  return DatabaseFS.observeToUserInvites(toUid, toEmail, callback);\n}\n\nexport async function updateInvite(inviteId, update) {\n  DatabaseFS.updateInvite(inviteId, update);\n}\n\nexport async function updateUserGroupMembership(userGroupMembershipId, update) {\n  DatabaseRDB.updateUserGroupMembership(userGroupMembershipId, update);\n}\n\nexport async function updateUserMessage(uid, messageId, update) {\n  DatabaseRDB.updateUserMessage(uid, messageId, update);\n}\n\nexport async function updateUser(userId, update) {\n  DatabaseRDB.updateUser(userId, update);\n}\n\nexport async function logError(error, info) {\n  DatabaseRDB.logError(error, info);\n}\n","import * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { onAuthStateChanged, signOut } from \"firebase/auth\";\nimport { Platform } from \"react-native\";\nimport * as Actions from \"./Actions\";\nimport { auth } from \"./config/firebase\";\nimport * as Database from \"./Database\";\nimport store from \"./Actions\";\n\nexport function buildSearchIndex(orgsMap, groupsMap) {\n  const searchWordIndex = {};\n  for (const orgId of Object.keys(orgsMap)) {\n    const org = orgsMap[orgId];\n    const orgName = org.name;\n    if (orgName != null) {\n      const words = splitIntoWords(org.name);\n      for (const word of words) {\n        addIntoMap(searchWordIndex, word, { type: \"org\", entity: org.id });\n      }\n    }\n  }\n\n  for (const groupId of Object.keys(groupsMap)) {\n    const group = groupsMap[groupId];\n    const org = orgsMap[groupId.orgId];\n    const groupWords = splitIntoWords(group.name);\n    const orgWords = org != null ? splitIntoWords(org.name) : [];\n    const words = groupWords.concat(orgWords);\n    for (const word of words) {\n      addIntoMap(searchWordIndex, word, { type: \"group\", entity: group.id });\n    }\n  }\n\n  const searchTree = { subTree: {} };\n  for (let [x, entities] of Object.entries(searchWordIndex)) {\n    let parent = searchTree;\n    for (let y of x) {\n      let subTree = parent[\"subTree\"][y];\n      if (subTree == null) {\n        subTree = { y, entities: [...entities], subTree: {} };\n        parent[\"subTree\"][y] = subTree;\n      } else {\n        subTree[\"entities\"] = subTree[\"entities\"].concat(entities);\n      }\n      parent = subTree;\n    }\n  }\n  return searchTree;\n  //consecutive word matches count for the most\n}\n\nfunction splitIntoWords(str) {\n  const split = [];\n  let current = null;\n  for (const c of str) {\n    if (isAlphaNumericCharacter(c)) {\n      current = current == null ? c : current + c;\n    } else {\n      if (current != null) {\n        split.push(current.toUpperCase());\n        current = null;\n      }\n    }\n  }\n  if (current != null) {\n    split.push(current.toUpperCase());\n  }\n  return split;\n}\n\nfunction isAlphaNumericCharacter(str) {\n  const code = str.charCodeAt(0);\n  if (\n    !(code > 47 && code < 58) && // numeric (0-9)\n    !(code > 64 && code < 91) && // upper alpha (A-Z)\n    !(code > 96 && code < 123)\n  ) {\n    // lower alpha (a-z)\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction addIntoMap(map, key, val) {\n  if (!(key in map)) {\n    map[key] = [];\n  }\n  map[key].push(val);\n}\n\nexport function search(index, text) {\n  const words = splitIntoWords(text);\n  let results = [];\n  for (let word of words) {\n    const wordResults = findInIndex(index, word);\n    results = results.concat(wordResults);\n  }\n\n  const entityMap = {};\n  for (const entity of results) {\n    entityMap[entity.entity] = entity;\n  }\n\n  const occurrences = results.reduce(function (acc, result) {\n    return (\n      acc[result.entity] ? ++acc[result.entity] : (acc[result.entity] = 1), acc\n    );\n  }, {});\n\n  let maxCountResults = [];\n  let maxCount = 0;\n  for (let [entityId, count] of Object.entries(occurrences)) {\n    if (count == maxCount) {\n      maxCountResults.push(entityId);\n    } else if (count > maxCount) {\n      maxCount = count;\n      maxCountResults = [entityId];\n    }\n  }\n\n  return maxCountResults.map((entityId) => entityMap[entityId]);\n}\n\nexport function findInIndex(index, word) {\n  let current = index;\n  for (let ch of word) {\n    current = current.subTree[ch];\n  }\n\n  if (current != null) {\n    return current.entities;\n  }\n}\n","import * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { onAuthStateChanged, signOut } from \"firebase/auth\";\nimport { Platform } from \"react-native\";\nimport * as Actions from \"./Actions\";\nimport { auth } from \"./config/firebase\";\nimport * as Database from \"./Database\";\nimport store from \"./Actions\";\nimport * as Search from \"./Search\";\n\n//import { Database } from \"firebase-firestore-lite\";\n\nconst groupMessageSubscriptions = {};\n\nexport async function initializeApp(dispatch, notificationListener, responseListener) {\n  const orgs = await Database.getAllOrgs();\n\n  // store all groups\n  const groups = await Database.getAllGroups();\n\n  // store all people\n  const users = await Database.getAllUsers();\n\n  //all group memberships\n  const groupMemberships = await Database.getAllGroupMemberships();\n\n  dispatch(\n    Actions.locationDataInit({\n      orgs,\n      groups,\n      users,\n      groupMemberships,\n    })\n  );\n\n  //observe group_membership_changes\n  Database.observeAllGroupMembershipChanges((groupMemberships) => {\n    dispatch(Actions.groupMemberships(groupMemberships));\n  });\n\n  //push notification token\n  let pushToken = null;\n\n  // register for push notifications - receive a token that you can use\n  // to push notifications to this particular device\n  await registerForPushNotificationsAsync()\n    .then((token) => {\n      console.log(\"Got push notificaiton token: \" + token);\n      pushToken = token;\n    })\n    .catch((error) => {\n      console.log(\"ERROR REtRieving PUSH TOKEN _ INVESTIGATE!!!\\n\" + error);\n    });\n\n  //foreground notifications settings\n  /*\n  Notifications.setNotificationHandler({\n    handleNotification: async (notification) => {\n      console.log('handle notification');\n      return {\n      shouldShowAlert: true,\n      shouldPlaySound: true,\n      shouldSetBadge: true,\n    };\n  }\n  });\n  */\n  //FOREGROUND app handler\n  const notificationReceivedListener = Notifications.addNotificationReceivedListener(\n    (notification) => {\n      /*\n      alert(\n        \"FOREGROUND notification received while app is running: \" +\n          JSON.stringify(notification)\n      );\n      */\n    }\n  );\n\n  // This listener is fired whenever a user taps on or interacts with a\n  // notification (works when app is foregrounded, backgrounded, or killed)\n  const notificationResponseReceivedListener =\n    Notifications.addNotificationResponseReceivedListener((response) => {\n      /*\n      alert(\n        \"FOREGROUND/BACKGROUND/KILLED notification response received listener: \" +\n          JSON.stringify(response)\n      );\n      */\n    });\n\n  // subscribe to auth changes\n  const unsubscribeAuth = onAuthStateChanged(auth, async (authenticatedUser) => {\n    console.log(\"auth state change: \" + JSON.stringify(authenticatedUser));\n    if (authenticatedUser != null) {\n      console.log(\"loggedIN: \" + pushToken);\n      loggedIn(dispatch, authenticatedUser, pushToken);\n    } else {\n      loggedOut(dispatch);\n    }\n  });\n\n  //observe to group changes\n  Database.observeAllGroupChanges((groups) => {\n    dispatch(Actions.groups(groups));\n  });\n\n  //build the search index\n  const searchIndex = Search.buildSearchIndex(\n    store.getState().main.orgsMap,\n    store.getState().main.groupMap\n  );\n\n  dispatch(Actions.searchIndex(searchIndex));\n\n  return () => {\n    notificationReceivedListener.remove();\n    notificationResponseReceivedListener.remove();\n    unsubscribeAuth();\n  };\n}\n\nexport function getLoggedInScreen(state) {\n  if (state.screen.postLoginScreen != null) {\n    return state.screen.postLoginScreen;\n  }\n  return { screen: \"GROUPS\" };\n}\n\nexport async function loggedIn(dispatch, authenticatedUser, pushToken) {\n  console.log(\"logged in\");\n  const uid = authenticatedUser.uid;\n\n  let userData = {\n    uid,\n    displayName: authenticatedUser.displayName,\n    photoURL: authenticatedUser.photoURL,\n    email: authenticatedUser.email,\n  };\n  if (pushToken != undefined) {\n    userData = { pushToken, ...userData };\n  }\n\n  const userInfo = await Database.updateOrCreateUser(uid, userData);\n  //observe user changes\n  Database.observeUserChanges(uid, (userInfo) => {\n    dispatch(Actions.userInfo(userInfo));\n  });\n\n  //observe user group membership changes\n  Database.observeUserGroupMemberships(uid, (userGroupMemberships) => {\n    dispatch(Actions.userGroupMemberships(userGroupMemberships));\n    userGroupMemberships.forEach(async (groupMembership) => {\n      //Loop through group_memberships and set up a subscriber for its messages\n      if (!(groupMembership.groupId in groupMessageSubscriptions)) {\n        const unsubscribe = Database.observeGroupMessages(\n          groupMembership.groupId,\n          (messagesSnapshot) => {\n            const messages = [];\n            messagesSnapshot.forEach((message) => {\n              messages.push(message);\n            });\n            dispatch(\n              Actions.groupMessages({\n                groupId: groupMembership.groupId,\n                messages: messages,\n              })\n            );\n          }\n        );\n        groupMessageSubscriptions[groupMembership.groupId] = unsubscribe;\n      }\n    });\n  });\n\n  //observe user messages\n  Database.observeUserMessages(uid, (userMessages) => {\n    dispatch(Actions.userMessages(userMessages));\n  });\n\n  //observe org changes\n  Database.observeOrgChanges((orgs) => {\n    dispatch(Actions.orgsUpdated(orgs));\n  });\n\n  // observe invites\n  Database.observeToUserInvites(userInfo.uid, userInfo.email, (invites) => {\n    dispatch(Actions.toUserInvites(invites));\n  });\n}\n\nexport async function loggedOut(dispatch) {\n  dispatch(Actions.goToScreen({ screen: \"LOGIN\" }));\n}\n\nexport async function initialUserProfileSchools(dispatch, userInfo, schools) {\n  await Database.updateOrCreateUser(userInfo.uid, {\n    profile: { schools },\n  });\n  //dispatch(Actions.userInfo(newUserInfo));\n\n  dispatch(Actions.goToScreen({ screen: \"INITIAL_SELECT_SCHOOL_GROUPS\" }));\n  if (userInfo.profileInitialized == null || userInfo.profileInitialized == false) {\n    dispatch(Actions.openModal({ modal: \"MY_PROFILE\" }));\n  }\n}\n\nexport async function joinGroup(dispatch, userInfo, groupId) {\n  await Database.joinGroup(userInfo, groupId);\n}\n\nexport async function createSchoolGroupAndJoin(\n  dispatch,\n  userInfo,\n  schoolId,\n  groupName,\n  grade,\n  year\n) {\n  const groupId = await Database.createGroup({\n    name: groupName,\n    orgId: schoolId,\n    grade,\n    year,\n  });\n  await Database.joinGroup(userInfo, groupId);\n}\n\nexport async function markMessageRead(userInfo, messageId) {\n  markMessagesRead(userInfo, [messageId]);\n}\n\nexport async function markMessagesRead(userInfo, messageIds) {\n  for (const messageId of messageIds) {\n    Database.updateUserMessage(userInfo.uid, messageId, { status: \"read\" });\n  }\n}\n\nexport async function createPrivateGroupAndJoin(\n  dispatch,\n  userInfo,\n  groupName,\n  invitees,\n  emailInvitees\n) {\n  const groupId = await Database.createGroup({\n    name: groupName,\n    orgId: null,\n  });\n  await Database.joinGroup(userInfo, groupId);\n\n  for (const inviteeUid of invitees) {\n    sendGroupInviteToUser(userInfo, groupId, inviteeUid);\n  }\n\n  for (const inviteeEmail of emailInvitees) {\n    sendGroupInviteToEmail(userInfo, groupId, inviteeEmail);\n  }\n\n  return groupId;\n}\n\nexport async function createOrgGroupAndJoin(dispatch, userInfo, orgId, groupName) {\n  const groupId = await Database.createGroup({\n    name: groupName,\n    orgId: orgId,\n  });\n  await Database.joinGroup(userInfo, groupId);\n}\n\nexport async function sendMessage(\n  dispatch,\n  userInfo,\n  groupId,\n  title,\n  text,\n  papaId,\n  notificationInfo\n) {\n  return await Database.sendMessage(\n    groupId,\n    userInfo.uid,\n    title == undefined ? null : title,\n    text,\n    null,\n    papaId == undefined ? null : papaId,\n    notificationInfo\n  );\n}\n\nexport async function sendReply(dispatch, userInfo, groupId, text, papaId, notificationInfo) {\n  return await Database.sendMessage(\n    groupId,\n    userInfo.uid,\n    null,\n    text,\n    null,\n    papaId == undefined ? null : papaId,\n    notificationInfo\n  );\n}\n\nexport async function sendEventMessage(\n  dispatch,\n  userInfo,\n  groupId,\n  title,\n  text,\n  startDate,\n  endDate,\n  papaId,\n  notificationInfo\n) {\n  return await Database.sendMessage(\n    groupId,\n    userInfo.uid,\n    title == undefined ? null : title,\n    text,\n    {\n      event: {\n        startDate,\n        endDate,\n      },\n    },\n    papaId == undefined ? null : papaId,\n    notificationInfo == undefined ? null : notificationInfo\n  );\n}\n\nexport async function sendEventReply(\n  dispatch,\n  userInfo,\n  groupId,\n  status,\n  text,\n  papaId,\n  notificationInfo\n) {\n  return await Database.sendMessage(\n    groupId,\n    userInfo.uid,\n    null,\n    text,\n    {\n      event: {\n        status,\n      },\n    },\n    papaId == undefined ? null : papaId,\n    notificationInfo\n  );\n}\n\nexport async function logout(dispatch) {\n  await signOut(auth);\n  dispatch(Actions.clearUserData({}));\n}\n\nasync function sendPushNotification(expoPushToken) {\n  const message = {\n    to: expoPushToken,\n    sound: \"default\",\n    title: \"Original Title\",\n    body: \"And here is the body!\",\n    data: { someData: \"goes here\" },\n  };\n\n  await fetch(\"https://exp.host/--/api/v2/push/send\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Accept-encoding\": \"gzip, deflate\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      //alert(\"Failed to get push token for push notification!\");\n      console.log(\"Failed to get push token for push notification!\");\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    //palert(\"got notification token!\");\n  } else {\n    alert(\"Must use physical device for Push Notifications\");\n  }\n\n  if (Platform.OS === \"android\") {\n    Notifications.setNotificationChannelAsync(\"default\", {\n      name: \"default\",\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: \"#FF231F7C\",\n    });\n  }\n\n  return token;\n}\n\nexport async function inviteToGroup(dispatch, fromUserInfo, touserInfo, groupId) {}\n\nexport async function createOrgAndAssignToUser(dispatch, userInfo, name, type) {\n  const orgId = await Database.createOrg(name, type);\n  await Database.updateUserAddToArrayField(userInfo.uid, \"orgs\", orgId);\n}\n\nexport async function sendGroupInviteToEmail(userInfo, groupId, email) {\n  await Database.createInvite(userInfo.uid, groupId, null, email);\n}\n\nexport async function sendGroupInviteToUser(userInfo, groupId, uid) {\n  await Database.createInvite(userInfo.uid, groupId, uid, null);\n}\n\nexport async function joinGroupFromInvite(dispatch, userInfo, groupId, inviteId) {\n  await Database.joinGroup(userInfo, groupId);\n  await Database.updateInvite(inviteId, { status: \"dismissed\" });\n}\n\nexport async function dismissInvite(dispatch, userInfo, inviteId) {\n  await Database.updateInvite(inviteId, { status: \"dismissed\" });\n}\n\nexport function searchGroupsAndOrgs(text) {\n  const searchIndex = store.getState().main.searchIndex;\n  const results = Search.search(searchIndex, text);\n  return results;\n}\n\nexport async function setUserGroupLastViewedTimestamp(\n  userInfo,\n  groupId,\n  lastViewedMessageTimestamp\n) {\n  const userGroupMemberships = store\n    .getState()\n    .main.groupMembershipMap[groupId].filter((gm) => gm.uid == userInfo.uid);\n\n  const userGroupMembership = userGroupMemberships.length > 0 ? userGroupMemberships[0] : null;\n  if (userGroupMembership != null) {\n    console.log(\n      \"found usergroupmembership: \" +\n        userGroupMembership.id +\n        \", updating timestamp: \" +\n        lastViewedMessageTimestamp\n    );\n    Database.updateUserGroupMembership(userGroupMembership.id, {\n      lastViewedMessageTimestamp,\n    });\n  }\n}\n\nexport async function saveProfile(userId, firstName, lastName, image) {\n  await Database.updateUser(userId, {\n    firstName,\n    lastName,\n    image,\n    profileInitialized: true,\n  });\n}\n\nexport async function deleteGroup(userInfo, groupId) {\n  await Database.updateGroup(groupId, {\n    status: \"deleted\",\n  });\n}\n","import React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport * as Paper from \"react-native-paper\";\nimport { Badge } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport * as Elements from \"react-native-elements\";\n\nconst MenuButton = React.memo(\n  ({ icon, text, onPress, color = \"black\", badge }) => {\n    return (\n      <TouchableOpacity onPress={onPress}>\n        <View\n          style={{\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            marginLeft: 8,\n            marginRight: 8,\n          }}\n        >\n          <Icon name={icon} style={{ color: color, fontSize: 24 }} />\n          {badge}\n          <Text style={{ color: color, fontSize: 12 }}>{text}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  }\n);\n\nconst DialogButton = React.memo(({ text, onPress, icon, style }) => {\n  return (\n    <TouchableOpacity onPress={onPress}>\n      <View\n        style={[\n          {\n            flex: 1,\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            marginLeft: 8,\n            marginRight: 8,\n            marginBottom: 8,\n            alignSelf: \"center\",\n            ...style,\n          },\n        ]}\n      >\n        {icon && (\n          <Icon\n            name={icon}\n            style={{ marginRight: 10, color: \"black\", fontSize: 16 }}\n          />\n        )}\n        <Text style={{ color: \"black\", fontSize: 18 }}>{text}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n});\n\nconst PaperDialogButton = React.memo(({ text, icon, onPress }) => {\n  return (\n    <Paper.Button\n      icon={icon}\n      labelStyle={{ color: \"black\", fontSize: 18 }}\n      uppercase={false}\n      onPress={onPress}\n    >\n      {text}\n    </Paper.Button>\n  );\n});\n\n/*\nconst FormButton = React.memo(({ text, icon, onPress, style }) => {\n  return (\n    <Paper.Button\n      style={style}\n      icon={icon}\n      labelStyle={{ color: \"black\", fontSize: 12 }}\n      uppercase={false}\n      onPress={onPress}\n      mode=\"contained\"\n      color=\"blue\"\n      //labelStyle={{ fontSize: 16, color: \"white\" }}\n    >\n      {text}\n    </Paper.Button>\n  );\n});\n*/\n\nconst FormButton = React.memo(({ text, icon, onPress, style }) => {\n  return (\n    <Elements.Button title={text} icon={icon} onPress={onPress} mode=\"outline\">\n      {text}\n    </Elements.Button>\n  );\n});\n\nconst LinkButton = React.memo(({ text, onPress, style }) => {\n  return (\n    <TouchableOpacity onPress={onPress}>\n      <Text\n        style={[\n          style,\n          { fontSize: 16, textDecorationLine: \"underline\", color: \"blue\" },\n        ]}\n      >\n        {text}\n      </Text>\n    </TouchableOpacity>\n  );\n});\n\nexport { MenuButton, DialogButton, PaperDialogButton, FormButton, LinkButton };\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\nconst BottomBar = ({ style, children }) => {\n  return (\n    <View\n      style={[\n        style,\n        {\n          height: 80,\n          paddingTop: 8,\n          paddingBottom: 8,\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          //zIndex: Number.MAX_VALUE,\n        },\n      ]}\n    >\n      {children.map((child, index) => {\n        return <View key={index}>{child}</View>;\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\", // row\n    alignItems: \"center\",\n  },\n});\n\nexport default React.memo(BottomBar);\n","/* given a single root message, built it with children */\nexport function buildMessageWithChildren(\n  messageId,\n  messages,\n  userInfo,\n  userMessagesMap,\n  groupMembers,\n  userMap\n) {\n  let rootMessage = { children: [] };\n  for (const m of messages) {\n    if (m.papaId == messageId) {\n      rootMessage.children.push(m);\n    } else if (m.id == messageId) {\n      rootMessage = { ...m, ...rootMessage };\n    }\n  }\n  let rootMessageWithStatus = addMeta(rootMessage, userInfo, userMessagesMap, userMap);\n  if (rootMessage.event != null) {\n    rootMessageWithStatus = addEventData(rootMessage, userInfo, groupMembers);\n  }\n  return rootMessageWithStatus;\n}\n\n/* builds the entire collection of root message for all the messages of a group*/\nexport function buildRootMessagesWithChildren(\n  messages,\n  userInfo,\n  userMessagesMap,\n  groupMembers,\n  userMap\n) {\n  const messageMap = messages.reduce(function (acc, message) {\n    acc[message.id] = { ...message };\n    return acc;\n  }, {});\n\n  for (const m of Object.values(messageMap)) {\n    if (m.papaId != null) {\n      const papaMessage = messageMap[m.papaId];\n      if (papaMessage.children == null) {\n        papaMessage[\"children\"] = [];\n      }\n      papaMessage.children.push(m);\n    }\n  }\n\n  const rootMessages = Object.values(messageMap).filter((m) => m.papaId == null);\n  const messagesWithStatus = rootMessages.map((rootMessage) => {\n    let rootMessageWithStatus = addMeta(rootMessage, userInfo, userMessagesMap, userMap);\n    if (rootMessage.event != null) {\n      rootMessageWithStatus = addEventData(rootMessageWithStatus, userInfo, groupMembers);\n    }\n    return { ...rootMessage, ...rootMessageWithStatus };\n  });\n  return messagesWithStatus;\n}\n\nexport function calculateUnreadMessages(groupMessagesMap, userMessagesMap) {\n  let unreadMessages = 0;\n  for (const groupId of Object.keys(groupMessagesMap)) {\n    const groupMessages = groupMessagesMap[groupId];\n    for (const message of groupMessages) {\n      const userMessage = userMessagesMap[message.id];\n      if (userMessage == null || userMessage.status != \"read\") {\n        unreadMessages += 1;\n      }\n    }\n  }\n  return unreadMessages;\n}\n\nexport function addMeta(rootMessage, userInfo, userMessagesMap, userMap) {\n  /* status */\n  let status = null;\n  if (userInfo.uid !== rootMessage.uid) {\n    status = userMessagesMap[rootMessage.id]?.status;\n  } else {\n    status = \"read\";\n  }\n\n  /* user */\n  const user = userMap[rootMessage.uid];\n\n  /* unread child count */\n  const unreadChildCount = (rootMessage.children ?? []).filter((c) => {\n    if (c.uid === userInfo.uid) {\n      return false;\n    }\n    const status = userMessagesMap[c.id]?.status != \"read\";\n    return status;\n  }).length;\n\n  /* add meta to children */\n  const children = [];\n  for (const childMessage of rootMessage.children ?? []) {\n    let childStatus = null;\n    if (childMessage.uid !== userInfo.uid) {\n      childStatus = userMessagesMap[childMessage.id];\n    } else {\n      childStatus = \"read\";\n    }\n    const childMessageUser = userMap[childMessage.uid];\n    children.push({ ...childMessage, status: childStatus, user: childMessageUser });\n  }\n\n  /* timestamp */\n  const lastUpdated = Math.max(\n    rootMessage.timestamp,\n    Math.max.apply(\n      Math,\n      (rootMessage.children ?? []).map((m) => m.timestamp)\n    )\n  );\n\n  return { ...rootMessage, status, unreadChildCount, lastUpdated, children, user };\n}\n\nexport function addEventData(rootMessage, userInfo, userMessagesMap, groupMembers) {\n  const eventWithUserStatus = { ...rootMessage.event };\n  for (const childMessage of rootMessage.children ?? []) {\n    const childEvent = childMessage.event;\n    if (childEvent != null) {\n      const childStatus = childEvent.status;\n      const userStatus = { ...eventWithUserStatus.users };\n      userStatus[childMessage.uid] = { status: childStatus };\n      const summary = { ...eventWithUserStatus.summary };\n      const statusCount = summary[childStatus] ?? 0;\n      summary[childStatus] = statusCount + 1;\n      eventWithUserStatus[\"users\"] = userStatus;\n      eventWithUserStatus[\"summary\"] = summary;\n    }\n  }\n\n  return { ...rootMessage, event: eventWithUserStatus };\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport BottomBar from \"./BottomBar\";\nimport * as Controller from \"./Controller\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as UIConstants from \"./UIConstants\";\nimport { Badge } from \"react-native-elements\";\nimport * as MessageUtils from \"./MessageUtils\";\n\nconst Toolbar = ({ selected }) => {\n  const dispatch = useDispatch();\n  const { groupMessagesMap, userMessagesMap } = useSelector((state) => {\n    return {\n      groupMessagesMap: state.main.groupMessages,\n      userMessagesMap: state.main.userMessagesMap,\n    };\n  });\n\n  const unreadMessages = MessageUtils.calculateUnreadMessages(groupMessagesMap, userMessagesMap);\n  return (\n    <BottomBar style={{ backgroundColor: UIConstants.DEFAULT_BACKGROUND }}>\n      <MyButtons.MenuButton\n        icon=\"account-group\"\n        color={selected == \"groups\" ? \"mediumblue\" : \"black\"}\n        text=\"My Groups\"\n        onPress={() => {\n          dispatch(\n            Actions.goToScreen({\n              screen: \"GROUPS\",\n            })\n          );\n        }}\n        badge={\n          (unreadMessages ?? 0) > 0 ? (\n            <Badge\n              status=\"error\"\n              value={unreadMessages}\n              containerStyle={{ position: \"absolute\", top: -4, right: -4 }}\n            />\n          ) : null\n        }\n      />\n\n      <MyButtons.MenuButton\n        icon=\"magnify\"\n        text=\"Find Groups\"\n        color={selected == \"find_groups\" ? \"mediumblue\" : \"black\"}\n        onPress={() => {\n          dispatch(\n            Actions.goToScreen({\n              screen: \"FIND_GROUPS\",\n            })\n          );\n        }}\n      />\n\n      <MyButtons.MenuButton\n        icon=\"account-circle\"\n        text=\"Profile\"\n        onPress={() => {\n          dispatch(\n            Actions.goToScreen({\n              screen: \"MY_PROFILE\",\n            })\n          );\n        }}\n      />\n      {/*\n      <MyButtons.MenuButton\n        icon=\"logout\"\n        text=\"Logout\"\n        onPress={() => {\n          Controller.logout();\n        }}\n      />\n      */}\n      <MyButtons.MenuButton\n        icon=\"checkbox-blank-circle\"\n        text=\"Debug\"\n        onPress={() => {\n          dispatch(\n            Actions.goToScreen({\n              screen: \"DEBUG\",\n              backAction: () => Actions.goToScreen({ screen: \"GROUPS\" }),\n            })\n          );\n        }}\n      />\n    </BottomBar>\n  );\n};\n\nexport default React.memo(Toolbar);\n","export const PLAY_EDITOR_MENU_BACKGROUND = \"#333333\";\n//export const PLAY_EDITOR_MENU_BACKGROUND = \"red\";\nexport const PLAY_EDITOR_MENU_ICON_FILL_COLOR = \"white\";\nexport const FIELD_COLOR = \"forestgreen\";\nexport const DEFAULT_BACKGROUND = \"whitesmoke\";\nexport const BLACK_TEXT_COLOR = \"#282828\";\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, TextInput, SafeAreaView } from \"react-native\";\nimport { ToggleButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport * as MyButtons from \"./MyButtons\";\nimport JSONTree from \"react-native-json-tree\";\nimport * as Controller from \"./Controller\";\nimport Toolbar from \"./Toolbar\";\nimport * as Database from \"./Database\";\n\nexport default function DebugScreen({ backAction }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const {\n    schoolList,\n    schoolMap,\n    groupList,\n    groupMap,\n    orgsList,\n    userGroupMemberships,\n  } = useSelector((state) => {\n    return {\n      schoolList: state.main.schoolList,\n      schoolMap: state.main.schoolMap,\n      groupList: state.main.groupList,\n      groupMap: state.main.groupMap,\n      userGroupMemberships: state.main.userGroupMemberships,\n      orgsList: state.main.orgsList,\n    };\n  });\n\n  const [addSchoolDisabled, setAddSchoolDisabled] = useState(false);\n  const [newSchoolName, setNewSchoolName] = useState(\"\");\n\n  return (\n    <SafeAreaView>\n      <View style={{ grow: 1 }}>\n        <View\n          style={{\n            backgroundColor: \"orange\",\n            flexDirection: \"row\",\n            justifyContent: \"space-evenly\",\n          }}\n        >\n          <Text style={{ fontWeight: \"bold\" }}>Add School</Text>\n          <TextInput\n            style={{ borderWidth: 1, width: 150 }}\n            placeholder=\"School Name\"\n            onChangeText={(text) => setNewSchoolName(text)}\n          />\n          <MyButtons.FormButton\n            text=\"Add\"\n            disabled={setAddSchoolDisabled}\n            style={{ width: 100, fontSize: 10 }}\n            onPress={async () => {\n              setAddSchoolDisabled(true);\n              await Database.createOrg(newSchoolName, \"school\");\n              setAddSchoolDisabled(false);\n            }}\n          />\n        </View>\n\n        <JSONTree\n          data={{\n            user: userInfo,\n            groups: groupList,\n            user_group_memberships: userGroupMemberships,\n            orgsList: orgsList,\n          }}\n        />\n        <MyButtons.FormButton\n          text=\"Back\"\n          onPress={() => {\n            dispatch(backAction());\n          }}\n        />\n      </View>\n      <Toolbar />\n    </SafeAreaView>\n  );\n}\n","import React from \"react\";\nimport { Text, View, Button, SafeAreaView } from \"react-native\";\nimport Actions from \"./Actions\";\n\nfunction ErrorScreen({ error, resetErrorBoundary }) {\n  return (\n    <SafeAreaView>\n      <Text>ErrorScreen</Text>\n      <Text>{error.message}</Text>\n      <Text>{error.stack}</Text>\n      <Button\n        title=\"Reset error boundary\"\n        onPress={() => {\n          if (resetErrorBoundary) {\n            resetErrorBoundary();\n          }\n        }}\n      />\n    </SafeAreaView>\n  );\n}\n\nexport default ErrorScreen;\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, TextInput, SafeAreaView } from \"react-native\";\nimport { ToggleButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport * as MyButtons from \"./MyButtons\";\n\nexport default function NewSchoolGroupModal({\n  schoolId,\n  visible,\n  onCreateGroup,\n  closeModal,\n}) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { orgsList, orgsMap, groupList, groupMap, userGroupMemberships } =\n    useSelector((state) => {\n      return {\n        orgsList: state.main.orgsList,\n        orgsMap: state.main.orgsMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n      };\n    });\n  const [gradeSelection, setGradeSelection] = useState(null);\n  const [yearSelection, setYearSelection] = useState(null);\n  const [groupName, setGroupName] = useState(null);\n  const [processing, setProcessing] = useState(false);\n\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n  if (processing) {\n    return (\n      <Modal visible={true}>\n        <Text>Creating group...</Text>\n      </Modal>\n    );\n  }\n\n  const grades = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"];\n  const years = [\"2021/22\", \"2020/21\", \"Other\"];\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <SafeAreaView>\n        <Text key=\"grade\">Grade</Text>\n        <View key=\"grades\" style={{ flexDirection: \"row\" }}>\n          {grades.map((grade) => {\n            return (\n              <Paper.Button\n                key={\"grade\" + grade}\n                mode={gradeSelection == grade ? \"contained\" : \"outlined\"}\n                compact=\"true\"\n                onPress={() => {\n                  setGradeSelection(grade);\n                }}\n              >\n                {grade}\n              </Paper.Button>\n            );\n          })}\n        </View>\n        <Text key=\"group_name_label\">Group Name</Text>\n        <TextInput\n          key=\"group_name_input\"\n          style={{ borderWidth: 1, width: \"100%\", fontSize: 16 }}\n          onChangeText={(value) => {\n            setGroupName(value);\n          }}\n          value={groupName ?? \"\"}\n          selectTextOnFocus={true}\n        />\n        <Text key=\"year_label\">Year</Text>\n        <View key=\"year_selection\" style={{ flexDirection: \"row\" }}>\n          {years.map((year) => {\n            return (\n              <Paper.Button\n                key={year}\n                mode={yearSelection == year ? \"contained\" : \"outlined\"}\n                compact=\"true\"\n                onPress={() => {\n                  setYearSelection(year);\n                }}\n              >\n                {year}\n              </Paper.Button>\n            );\n          })}\n        </View>\n        <MyButtons.FormButton\n          key=\"create_button\"\n          text=\"Join\"\n          onPress={() => {\n            setProcessing(true);\n            onCreateGroup(\n              groupName,\n              //gradeSelection ?? null,\n              \"foo\",\n              //yearSelection ?? null\n              \"bar\"\n            ).then(() => {\n              setProcessing(false);\n              closeModal();\n            });\n          }}\n        />\n      </SafeAreaView>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\nexport default function Portal({ backgroundColor, children, style }) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View style={{ flex: 1, width: \"100%\", flexDirection: \"column\" }}>\n      <View\n        style={[\n          style,\n          {\n            height: insets.top,\n            backgroundColor: backgroundColor,\n            flexGrow: 0,\n          },\n        ]}\n      />\n      <View\n        style={{\n          flexGrow: 1,\n          paddingLeft: insets.left,\n          paddingRight: insets.right,\n          backgroundColor: backgroundColor,\n        }}\n      >\n        {children}\n      </View>\n\n      <View\n        style={[\n          style,\n          {\n            height: insets.bottom,\n            backgroundColor: backgroundColor,\n            flexGrow: 0,\n          },\n        ]}\n      />\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { Avatar, Divider } from \"react-native-elements\";\n\nconst TopBar = ({ left, center, right, style, leftWidth }) => {\n  return (\n    <View style={{ backgroundColor: \"whitesmoke\", flexDirection: \"column\" }}>\n      <View\n        style={[\n          style,\n          {\n            //height: 100,\n            paddingLeft: 4,\n            paddingRight: 4,\n            paddingTop: 8,\n            paddingBottom: 8,\n            flexDirection: \"row\",\n            //zIndex: Number.MAX_VALUE,\n          },\n        ]}\n      >\n        <View\n          style={{\n            flexBasis: \"100%\",\n            flexGrow: 0,\n            alignItems: \"flex-start\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          {left}\n        </View>\n        {center != null && (\n          <View\n            style={{\n              flexBasis: 100,\n              flexGrow: 1,\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            {center}\n          </View>\n        )}\n        <View\n          style={{\n            flexBasis: 100,\n            flexGrow: 0,\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>{right}</View>\n        </View>\n      </View>\n      <Divider style={{}} width={1} color=\"lightgrey\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\", // row\n    alignItems: \"center\",\n  },\n});\n\nexport default React.memo(TopBar);\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { Avatar, Divider } from \"react-native-elements\";\n\nconst TopBarLeftContentSideButton = ({ content, side, style, leftWidth }) => {\n  return (\n    <View style={{ backgroundColor: \"whitesmoke\", flexDirection: \"column\" }}>\n      <View\n        style={[\n          style,\n          {\n            //height: 100,\n            paddingLeft: 4,\n            paddingRight: 4,\n            paddingTop: 8,\n            paddingBottom: 8,\n            flexDirection: \"row\",\n            //zIndex: Number.MAX_VALUE,\n          },\n        ]}\n      >\n        <View\n          style={{\n            flexGrow: 1,\n            alignItems: \"flex-start\",\n            justifyContent: \"center\",\n          }}\n        >\n          {content}\n        </View>\n        <View\n          style={{\n            width: 60,\n            flexGrow: 0,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>{side}</View>\n        </View>\n      </View>\n      <Divider style={{}} width={1} color=\"darkgrey\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\", // row\n    alignItems: \"center\",\n  },\n});\n\nexport default React.memo(TopBarLeftContentSideButton);\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { Avatar, Divider } from \"react-native-elements\";\n\nconst TopBar = ({ height = 80, left, center, right, style, leftWidth, backgroundColor }) => {\n  return (\n    <View\n      style={{\n        height: height ?? 80,\n        backgroundColor: backgroundColor ?? \"purple\",\n        flexDirection: \"column\",\n      }}\n    >\n      <View\n        style={[\n          style,\n          {\n            height: height - 1,\n            paddingLeft: 4,\n            paddingRight: 4,\n            paddingTop: 8,\n            paddingBottom: 8,\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            //zIndex: Number.MAX_VALUE,\n          },\n        ]}\n      >\n        <View\n          style={{\n            flexBasis: 60,\n            flexGrow: 0,\n            alignItems: \"flex-start\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          {left}\n        </View>\n        <View\n          style={{\n            flexGrow: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {center}\n        </View>\n        <View\n          style={{\n            flexBasis: 60,\n            flexGrow: 0,\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>{right}</View>\n        </View>\n      </View>\n      <Divider style={{}} width={1} color=\"darkgrey\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\", // row\n    alignItems: \"center\",\n  },\n});\n\nexport default React.memo(TopBar);\n","import { Avatar } from \"react-native-elements\";\nimport { TouchableOpacity, Text } from \"react-native\";\nimport React from \"react\";\nimport { Image } from \"react-native-expo-image-cache\";\n\n// preview can be a local image or a data uri\nexport function chatDisplayName(userInfo) {\n  if (userInfo == null) {\n    return \"[Unknown User]\";\n  }\n  if (userInfo.displayName != null) {\n    return displayName;\n  }\n\n  if (userInfo.firstName != null && userInfo.lastName != null) {\n    return userInfo.firstName + \" \" + userInfo.lastName;\n  }\n\n  if (userInfo.email != null) {\n    return userInfo.email.split(\"@\")[0];\n  } else {\n    return \"<null>\";\n  }\n}\n\nexport function avatarColor(userInfo) {\n  var hash = 0;\n  if (userInfo.email != null) {\n    for (var i = 0; i < userInfo.email.length; i++) {\n      hash = userInfo.email.charCodeAt(i) + ((hash << 5) - hash);\n    }\n  }\n  var h = hash % 360;\n  return \"hsl(\" + h + \", \" + \"50\" + \"%, \" + \"65\" + \"%)\";\n}\n\nexport function avatarComponent(userInfo, onPress) {\n  const displayName = chatDisplayName(userInfo);\n  let avatar = null;\n  if (userInfo.image != null) {\n    /*\n    avatar = (\n      <Image\n        source={{ uri: userInfo.image }}\n        style={{ width: 40, height: 40, borderRadius: 40 / 2 }}\n      />\n    );\n    */\n    const uri = userInfo.image;\n    avatar = <Image style={{ height: 40, width: 40, borderRadius: 20 }} uri={uri} />;\n  } else {\n    avatar = (\n      <Avatar\n        size={28}\n        rounded\n        title={displayName.charAt(0).toUpperCase()}\n        containerStyle={{\n          backgroundColor: avatarColor(userInfo),\n          marginRight: 1,\n        }}\n      />\n    );\n  }\n  if (onPress != null) {\n    return <TouchableOpacity onPress={onPress}>{avatar}</TouchableOpacity>;\n  } else {\n    return <>{avatar}</>;\n  }\n}\n\nexport function smallAvatarComponent(userInfo, onPress, border) {\n  const displayName = chatDisplayName(userInfo);\n  let avatar = null;\n  if (userInfo == null) {\n    return <Text>Null Info</Text>;\n  }\n  if (userInfo.image != null) {\n    const uri = userInfo.image;\n    avatar = (\n      <Image\n        style={{\n          height: 30,\n          width: 30,\n          borderWidth: border ? 2 : 0,\n          borderColor: \"whitesmoke\",\n          borderRadius: 15,\n        }}\n        uri={uri}\n      />\n    );\n  } else {\n    let letters = null;\n    if (userInfo.firstName != null && userInfo.lastName != null) {\n      letters =\n        userInfo.firstName.charAt(0).toUpperCase() + userInfo.lastName.charAt(0).toUpperCase();\n    } else {\n      letters = displayName.charAt(0).toUpperCase();\n    }\n    avatar = (\n      <Avatar\n        size={30}\n        rounded\n        title={letters}\n        containerStyle={{\n          backgroundColor: avatarColor(userInfo),\n          marginRight: 1,\n          borderWidth: border ? 1 : 0,\n          borderColor: \"whitesmoke\",\n        }}\n      />\n    );\n  }\n  if (onPress != null) {\n    return <TouchableOpacity onPress={onPress}>{avatar}</TouchableOpacity>;\n  } else {\n    return <>{avatar}</>;\n  }\n}\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, TextInput, SafeAreaView, ScrollView } from \"react-native\";\nimport { ToggleButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as Utils from \"./Utils\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\nimport * as UserInfo from \"./UserInfo\";\nimport { CheckBox } from \"react-native-elements\";\nimport * as Globals from \"./Globals\";\n\nexport default function NewPrivateGroupModal({ visible, createGroup, closeModal }) {\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const [groupName, setGroupName] = useState(null);\n  const [groupDescription, setGroupDescription] = useState(null);\n  const [inviteByEmail, setInviteByEmail] = useState(null);\n  const [invitees, setInvitees] = useState([]);\n  const [invitesByEmailList, setInvitesByEmailList] = useState([]);\n  const [processing, setProcessing] = useState(false);\n\n  const { groupMap, userGroupMemberships, groupMembershipMap, userMap } = useSelector((state) => {\n    return {\n      groupMap: state.main.groupMap,\n      userGroupMemberships: state.main.userGroupMemberships,\n      groupMembershipMap: state.main.groupMembershipMap,\n      userMap: state.main.userMap,\n    };\n  });\n\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n  if (processing) {\n    return (\n      <Modal visible={true}>\n        <Text>Creating group...</Text>\n      </Modal>\n    );\n  }\n\n  let addList = [];\n  for (let m of userGroupMemberships) {\n    const groupId = m.groupId;\n    const group = groupMap[groupId];\n    const members = groupMembershipMap[groupId];\n    for (let userGroupMemebership of members) {\n      const userId = userGroupMemebership.uid;\n      if (userId != userInfo.uid) {\n        const user = userMap[userId];\n        addList.push(user);\n      }\n    }\n  }\n  addList = Utils.uniqueArray(addList, (user) => user.uid);\n  /*\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === \"granted\") {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n  */\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <SafeAreaView style={{ flex: 1 }}>\n        <TopBarMiddleContentSideButtons\n          left={\n            <MyButtons.LinkButton\n              text=\"Cancel\"\n              onPress={async () => {\n                closeModal();\n              }}\n            />\n          }\n          center={\n            <View style={{ flex: 1 }}>\n              <Text>New Group</Text>\n              {Globals.dev && <Text>NewPrivateGroupModal.js</Text>}\n            </View>\n          }\n          right={\n            <MyButtons.LinkButton\n              text=\"Done\"\n              onPress={async () => {\n                await createGroup(groupName, invitees, invitesByEmailList);\n                closeModal();\n              }}\n            />\n          }\n        />\n        <View\n          style={{\n            paddingTop: 20,\n            paddingLeft: 10,\n            paddingRight: 10,\n            flexDirection: \"column\",\n            height: 140,\n            //backgroundColor: \"cyan\",\n          }}\n        >\n          <TextInput\n            key=\"group_name_input\"\n            style={{\n              borderWidth: 1,\n              paddingLeft: 10,\n              height: 40,\n              marginBottom: 20,\n              fontSize: 16,\n            }}\n            onChangeText={(value) => {\n              setGroupName(value);\n            }}\n            placeholder={\"Group Name\"}\n            value={groupName ?? \"\"}\n            selectTextOnFocus={true}\n          />\n          <TextInput\n            key=\"group_description\"\n            style={{\n              borderWidth: 1,\n              paddingLeft: 10,\n              height: 40,\n              fontSize: 16,\n            }}\n            onChangeText={(value) => {\n              setGroupDescription(value);\n            }}\n            placeholder={\"Description\"}\n            value={groupDescription ?? \"\"}\n            selectTextOnFocus={true}\n          />\n        </View>\n        {addList.length > 0 && (\n          <View\n            style={{\n              flexGrow: 1,\n              padding: 10,\n              //backgroundColor: \"yellow\",\n            }}\n          >\n            <Text>Add People</Text>\n            <ScrollView style={{ flex: 1, flexDirection: \"row\" }}>\n              {addList.map((user) => {\n                return (\n                  <View\n                    key={user.uid}\n                    style={{\n                      height: 60,\n                      justifyContent: \"flex-start\",\n                      alignContent: \"center\",\n                      //backgroundColor: \"cyan\",\n                      borderWidth: 0,\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    <CheckBox\n                      checked={invitees.includes(user.uid)}\n                      onPress={() => {\n                        let newInviteeList = [...invitees];\n                        if (newInviteeList.includes(user.uid)) {\n                          newInviteeList = newInviteeList.filter((i) => i != user.uid);\n                        } else {\n                          newInviteeList.push(user.uid);\n                        }\n                        setInvitees(newInviteeList);\n                      }}\n                    />\n                    <View\n                      style={{\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <Text\n                        style={{\n                          alignItems: \"center\",\n                          //backgroundColor: \"orange\",\n                        }}\n                      >\n                        {UserInfo.chatDisplayName(user)}\n                      </Text>\n                      <Text\n                        style={{\n                          alignItems: \"center\",\n                          alignSelf: \"flex-start\",\n                          fontSize: 10,\n                          //backgroundColor: \"orange\",\n                        }}\n                      >\n                        {user.email}\n                      </Text>\n                    </View>\n                  </View>\n                );\n              })}\n            </ScrollView>\n          </View>\n        )}\n        <View\n          style={{\n            height: 160,\n            padding: 10,\n            //backgroundColor: \"yellow\",\n          }}\n        >\n          <Text>Invite By Email</Text>\n          {invitesByEmailList.length > 0 && (\n            <View style={{ flex: 1 }}>\n              <ScrollView style={{ flex: 1 }}>\n                {invitesByEmailList.map((email) => {\n                  return <Text>{email}</Text>;\n                })}\n              </ScrollView>\n            </View>\n          )}\n          <View style={{ flex: 1, flexDirection: \"row\" }}>\n            <TextInput\n              key=\"invite_by_email_input\"\n              style={{\n                borderWidth: 1,\n                paddingLeft: 10,\n                height: 40,\n                marginBottom: 20,\n                fontSize: 16,\n              }}\n              onChangeText={(value) => {\n                setInviteByEmail(value);\n              }}\n              placeholder={\"Email\"}\n              value={inviteByEmail ?? \"\"}\n              selectTextOnFocus={true}\n              autoCapitalize={\"none\"}\n            />\n            <MyButtons.FormButton\n              text=\"Add\"\n              onPress={() => {\n                const newList = [...invitesByEmailList];\n                newList.push(inviteByEmail);\n                setInvitesByEmailList(newList);\n              }}\n            />\n          </View>\n        </View>\n      </SafeAreaView>\n    </Modal>\n  );\n}\n","export function uniqueArray(array, keyFunc) {\n  const ret = [];\n  const keys = new Set();\n  for (const e of array) {\n    const key = keyFunc(e);\n    if (!keys.has(key)) {\n      ret.push(e);\n      keys.add(key);\n    }\n  }\n  return ret;\n}\n","export const dev = false;\n","import React, { useState } from \"react\";\nimport { ScrollView, Text, View, TouchableOpacity } from \"react-native\";\nimport { SearchBar, Divider } from \"react-native-elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport * as Controller from \"./Controller\";\nimport * as MyButtons from \"./MyButtons\";\nimport NewSchoolGroupModal from \"./NewSchoolGroupModal\";\nimport Portal from \"./Portal\";\nimport * as UIConstants from \"./UIConstants\";\nimport TopBar from \"./TopBar\";\nimport BottomBar from \"./BottomBar\";\nimport Toolbar from \"./Toolbar\";\nimport NewOrgModal from \"./NewOrgModal\";\nimport TopBarLeftContentSideButton from \"./TopBarLeftContentSideButton\";\nimport NewPrivateGroupModal from \"./NewPrivateGroupModal\";\n\nexport default function FindGroupsScreens({ navigation }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const [searchResults, setSearchResults] = useState(null);\n  const { orgsList, orgsMap, groupList, groupMap, userGroupMemberships } =\n    useSelector((state) => {\n      return {\n        orgsList: state.main.orgsList,\n        orgsMap: state.main.orgsMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n      };\n    });\n\n  /* search bar at the top */\n  /* In the Groups page, a view that's divided into sections:\n[Search bar]\nSchools:\n - Brunswick\n - North Mianus \nActivities\n - OGRCC\n - Greenwich Dance Studio\n\n */\n  const createOrg = async function (name, type) {\n    return Controller.createOrgAndAssignToUser(dispatch, userInfo, name, type);\n  };\n  const schoolList = orgsList.filter((org) => {\n    return org.type == \"school\";\n  });\n  const otherOrgsList = orgsList.filter((org) => {\n    return org.type != \"school\";\n  });\n  const [searchText, setSearchText] = useState(\"\");\n  const [visibleNewOrgModal, setVisibleNewOrgModal] = useState(false);\n  const [newPrivateGroupModalVisible, setNewPrivateGroupModalVisible] =\n    useState(false);\n  const createPrivateGroup = async (groupName) => {\n    const groupId = await Controller.createPrivateGroupAndJoin(\n      dispatch,\n      userInfo,\n      groupName\n    );\n    dispatch(Actions.goToScreen({ screen: \"GROUP\", groupId: groupId }));\n  };\n  return (\n    <Portal backgroundColor={UIConstants.DEFAULT_BACKGROUND}>\n      <TopBarLeftContentSideButton\n        style={{}}\n        content={\n          <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n            Find Parent Groups\n          </Text>\n        }\n        side={\n          <MyButtons.MenuButton\n            icon=\"plus\"\n            text=\"Create Private Group\"\n            onPress={() => {\n              setNewPrivateGroupModalVisible(true);\n            }}\n          />\n        }\n      />\n      <NewPrivateGroupModal\n        visible={newPrivateGroupModalVisible}\n        createGroup={createPrivateGroup}\n        closeModal={() => setNewPrivateGroupModalVisible(false)}\n      />\n      <View\n        style={{ flex: 1, flexDirection: \"column\", backgroundColor: \"white\" }}\n      >\n        <View style={{ flexBasis: 80 }}>\n          <SearchBar\n            key=\"search\"\n            platform=\"ios\"\n            round\n            searchIcon={{ size: 12 }}\n            onChangeText={(text) => {\n              if (text == \"\") {\n                setSearchResults(null);\n              } else {\n                const results = Controller.searchGroupsAndOrgs(text);\n                setSearchResults(results);\n              }\n              setSearchText(text);\n            }}\n            onClear={(text) => {\n              setSearchText(\"\");\n              setSearchResults(null);\n            }}\n            placeholder=\"Search...\"\n            value={searchText}\n            containerStyle={{ backgroundColor: \"white\" }}\n          />\n        </View>\n        {searchResults != null &&\n          searchResultsSection(dispatch, searchResults, orgsMap, groupMap)}\n        {searchResults == null &&\n          directorySection(dispatch, schoolList, otherOrgsList)}\n      </View>\n      <Toolbar />\n    </Portal>\n  );\n}\n\nfunction searchResultsSection(dispatch, searchResults, orgsMap, groupMap) {\n  if (searchResults == null) {\n    return <Text>No Results</Text>;\n  }\n\n  return (\n    <View>\n      {searchResults.map((entity) => {\n        if (entity.type == \"org\") {\n          const org = orgsMap[entity.entity];\n          return (\n            <View style={{ flexDirection: \"column\" }}>\n              <Text\n                style={{\n                  fontSize: 16,\n                  paddingTop: 5,\n                  paddingBottom: 10,\n                  textDecorationLine: \"underline\",\n                  color: \"blue\",\n                  fontWeight: \"bold\",\n                  textAlign: \"start\",\n                  //backgroundColor: \"cyan\",\n                }}\n              >\n                {org.name}\n              </Text>\n              <Text style={{ fontSize: 12 }}>\n                {org.type == \"school\" ? \"School\" : \"Activities\"}\n              </Text>\n            </View>\n          );\n        } else if (entity.type == \"group\") {\n          const group = groupMap[entity.entity];\n          return (\n            <View style={{ flexDirection: \"column\" }}>\n              <Text\n                style={{\n                  fontSize: 16,\n                  paddingTop: 5,\n                  paddingBottom: 10,\n                  textDecorationLine: \"underline\",\n                  color: \"blue\",\n                  fontWeight: \"normal\",\n                  textAlign: \"start\",\n                  //backgroundColor: \"cyan\",\n                }}\n              >\n                {group.name}\n              </Text>\n              <Text style={{ fontSize: 12 }}>Group</Text>\n            </View>\n          );\n        }\n      })}\n    </View>\n  );\n}\n\nfunction directorySection(dispatch, schoolList, otherOrgsList) {\n  return (\n    <ScrollView\n      style={{\n        paddingLeft: 10,\n        flexGrow: 1,\n        flexDirection: \"column\",\n      }}\n    >\n      <Text style={{ fontSize: 20, fontWeight: \"bold\" }}>Schools</Text>\n      <Divider\n        style={{ marginTop: 10, marginBottom: 10 }}\n        width={1}\n        color=\"lightgrey\"\n      />\n      {schoolList\n        .sort(function (a, b) {\n          return a.name.toUpperCase().localeCompare(b.name.toUpperCase());\n        })\n        .map((school) => {\n          return (\n            <TouchableOpacity\n              onPress={() => {\n                dispatch(\n                  Actions.goToScreen({\n                    screen: \"SCHOOL\",\n                    schoolId: school.id,\n                  })\n                );\n              }}\n              style={\n                {\n                  /*backgroundColor: \"green\"*/\n                }\n              }\n            >\n              <Text\n                style={{\n                  fontSize: 16,\n                  paddingTop: 5,\n                  paddingBottom: 10,\n                  textDecorationLine: \"underline\",\n                  color: \"blue\",\n                  fontWeight: \"bold\",\n                  textAlign: \"start\",\n                  //backgroundColor: \"cyan\",\n                }}\n              >\n                {school.name}\n              </Text>\n            </TouchableOpacity>\n          );\n        })}\n      <Text style={{ marginTop: 20, fontSize: 20, fontWeight: \"bold\" }}>\n        Activities\n      </Text>\n      <Divider\n        style={{ marginTop: 10, marginBottom: 10 }}\n        width={1}\n        color=\"lightgrey\"\n      />\n      {otherOrgsList.map((org) => {\n        return (\n          <TouchableOpacity\n            onPress={() => {\n              dispatch(\n                Actions.goToScreen({\n                  screen: \"ORG\",\n                  orgId: org.id,\n                })\n              );\n            }}\n          >\n            <Text\n              style={{\n                fontSize: 16,\n                paddingTop: 5,\n                paddingBottom: 10,\n                textDecorationLine: \"underline\",\n                color: \"blue\",\n                fontWeight: \"bold\",\n                textAlign: \"start\",\n                //backgroundColor: \"cyan\",\n              }}\n            >\n              {org.name}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </ScrollView>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, TextInput, ScrollView } from \"react-native\";\nimport { ToggleButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as Controller from \"./Controller\";\nimport Portal from \"./Portal\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\n\nexport default function GroupInviteModal({\n  groupId,\n  visible,\n  onInvite,\n  closeModal,\n}) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const {\n    userList,\n    schoolList,\n    schoolMap,\n    groupList,\n    groupMap,\n    userGroupMemberships,\n  } = useSelector((state) => {\n    return {\n      schoolList: state.main.schoolList,\n      userList: state.main.userList,\n      schoolMap: state.main.schoolMap,\n      groupList: state.main.groupList,\n      groupMap: state.main.groupMap,\n      userGroupMemberships: state.main.userGroupMemberships,\n    };\n  });\n\n  const [processing, setProcessing] = useState(false);\n  const [email, setEmail] = useState(null);\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n  if (processing) {\n    return (\n      <Modal visible={true}>\n        <Text>Processing...</Text>\n      </Modal>\n    );\n  }\n\n  /*\n  const invitees = userList;\n  const inviteeComponents = invitees.map((user) => {\n    return (\n      <View\n        key={user.uid}\n        style={{\n          flexDirection: \"row\",\n          height: 60,\n          alignItems: \"center\",\n          paddingLeft: 10,\n        }}\n      >\n        <Text\n          style={{\n            flexGrow: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          {user.displayName ?? user.email}\n        </Text>\n        <View\n          style={{\n            flexBasis: 100,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <MyButtons.FormButton\n            text=\"Invite\"\n            onPress={async () => {\n              await Controller.sendGroupInviteToUser(\n                userInfo,\n                groupId,\n                user.id\n              );\n              closeModal();\n            }}\n          />\n        </View>\n      </View>\n    );\n  });\n  */\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Portal>\n        <TopBarMiddleContentSideButtons\n          style={{}}\n          left={\n            <MyButtons.MenuButton\n              icon=\"arrow-left\"\n              text=\"Back\"\n              onPress={() => {\n                closeModal();\n              }}\n              color=\"black\"\n            />\n          }\n          center={\n            <Text style={{ fontWeight: \"bold\", fontSize: 16 }}>Invite</Text>\n          }\n          right={null}\n        />\n        <Text>Email</Text>\n        <View\n          style={{\n            flexDirection: \"row\",\n            height: 60,\n            alignItems: \"center\",\n            paddingLeft: 10,\n          }}\n        >\n          <View style={{ flexDirection: \"column\" }}>\n            <TextInput\n              key=\"email\"\n              style={{ borderWidth: 1, width: \"100%\", fontSize: 16 }}\n              onChangeText={(value) => {\n                setEmail(value);\n              }}\n              value={email ?? \"\"}\n              selectTextOnFocus={true}\n            />\n            <Text>Enter emails separated by ','</Text>\n          </View>\n          <MyButtons.FormButton\n            text=\"Invite\"\n            onPress={async () => {\n              await Controller.sendGroupInviteToEmail(userInfo, groupId, email);\n              closeModal();\n            }}\n          />\n        </View>\n        {/*\n      <Text>Find People</Text>\n      <ScrollView>{inviteeComponents}</ScrollView>\n      <MyButtons.MenuButton\n        icon=\"arrow-right\"\n        text=\"Done\"\n        onPress={() => {\n          closeModal();\n        }}\n      />\n      */}\n      </Portal>\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, SafeAreaView, Alert } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as UserInfo from \"./UserInfo\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\nimport * as MyButtons from \"./MyButtons\";\nimport GroupInviteModal from \"./GroupInviteModal\";\nimport Portal from \"./Portal\";\nimport * as Controller from \"./Controller\";\nimport * as Actions from \"./Actions\";\n\nexport default function GroupMembersModal({ groupId, visible, closeModal }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { userMap, userList, schoolList, schoolMap, groupList, groupMap, members } = useSelector(\n    (state) => {\n      return {\n        userMap: state.main.userMap,\n        schoolList: state.main.schoolList,\n        userList: state.main.userList,\n        schoolMap: state.main.schoolMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        members: state.main.groupMembershipMap[groupId],\n      };\n    }\n  );\n\n  const [inviteModalVisible, setInviteModalVisible] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n  if (processing) {\n    return (\n      <Modal visible={true}>\n        <Text>Processing...</Text>\n      </Modal>\n    );\n  }\n\n  const invitees = userList;\n\n  const memberComponents = members.map((groupMembership) => {\n    const user = userMap[groupMembership.uid];\n    return (\n      <View\n        key={user.uid ?? groupMembership.uid}\n        style={{\n          flexDirection: \"row\",\n          height: 60,\n          justifyContent: \"flex-start\",\n          alignItems: \"flex-start\",\n          paddingLeft: 10,\n        }}\n      >\n        <View\n          style={{\n            flex: 1,\n            justifyContent: \"flex-start\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingBottom: 5,\n          }}\n        >\n          {UserInfo.avatarComponent(user)}\n          <Text\n            style={{\n              flexGrow: 1,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              paddingLeft: 10,\n            }}\n          >\n            {UserInfo.chatDisplayName(user)}\n          </Text>\n        </View>\n      </View>\n    );\n  });\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Portal>\n        <TopBarMiddleContentSideButtons\n          style={{}}\n          left={\n            <MyButtons.MenuButton\n              icon=\"arrow-left\"\n              text=\"Back\"\n              onPress={() => {\n                closeModal();\n              }}\n              color=\"black\"\n            />\n          }\n          center={<Text style={{ fontWeight: \"bold\", fontSize: 16 }}>Group Members</Text>}\n          right={null}\n        />\n        <View\n          style={{\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            paddingLeft: 10,\n            paddingTop: 10,\n            flexGrow: 1,\n          }}\n        >\n          {memberComponents}\n        </View>\n        <MyButtons.FormButton\n          text=\"Invite\"\n          onPress={async () => {\n            setInviteModalVisible(true);\n          }}\n        />\n        <MyButtons.FormButton\n          text=\"Delete Group\"\n          onPress={async () => {\n            Alert.alert(\"Are You Sure?\", null, [\n              {\n                text: \"Yes\",\n                onPress: async () => {\n                  await Controller.deleteGroup(userInfo, groupId);\n                  dispatch(\n                    Actions.goToScreen({\n                      screen: \"GROUPS\",\n                    })\n                  );\n                },\n              },\n              {\n                text: \"No\",\n                onPress: () => console.log(\"Cancel Pressed\"),\n                style: \"cancel\",\n              },\n            ]);\n          }}\n        />\n        <GroupInviteModal\n          groupId={groupId}\n          visible={inviteModalVisible}\n          closeModal={() => {\n            setInviteModalVisible(false);\n          }}\n          onInvite={async () => {}}\n        />\n      </Portal>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { Avatar, Divider } from \"react-native-elements\";\nimport TimeAgo from \"react-timeago\";\n\nimport moment from \"moment\";\nconst MessageTime = ({ timestamp, textStyle }) => {\n  const messageTime = moment(timestamp);\n\n  const [now, setNow] = useState(moment(new Date()));\n\n  const diffInSeconds = now.diff(messageTime, \"seconds\");\n\n  let text = \"\";\n  if (diffInSeconds < 60) {\n    text = \"Just now\";\n  } else if (diffInSeconds < 60 * 60) {\n    text = Math.round(diffInSeconds / 60) + \"m\";\n  } else if (diffInSeconds < 60 * 60 * 24) {\n    text = Math.round(diffInSeconds / (60 * 60)) + \"h\";\n  } else {\n    text = messageTime.format(\"lll\");\n  }\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = moment(new Date());\n      setNow(now);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <Text style={textStyle}>{text}</Text>;\n};\nexport default React.memo(MessageTime);\n","import React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport { Badge } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport TimeAgo from \"react-timeago\";\nimport * as Globals from \"./Globals\";\nimport * as UserInfo from \"./UserInfo\";\nimport MessageTime from \"./MessageTime\";\nimport * as UIConstants from \"./UIConstants\";\n\nexport default function MessageView({ item, onPress }) {\n  const timestamp = item.timestamp?.toDate();\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        onPress();\n      }}\n    >\n      <View style={{ flex: 1, flexDirection: \"row\", paddingRight: 20 }}>\n        <View\n          style={{\n            paddingLeft: 0,\n            paddingTop: 15,\n            alignItems: \"center\",\n            justifyContent: \"flex-start\",\n            width: 20,\n            //backgroundColor: \"cyan\",\n          }}\n        >\n          {(item.status != \"read\" || (item.unreadChildCount ?? 0) > 0) && (\n            <Badge\n              status=\"primary\"\n              //value={item.unreadChildCount ?? 0 > 0 ? item.unreadChildCount : \" \"}\n              value={\"\"}\n              containerStyle={{ width: 12, height: 12 }}\n            />\n          )}\n        </View>\n        <View\n          style={{\n            flexGrow: 1,\n            flexDirection: \"row\",\n            //backgroundColor: \"cyan\"\n          }}\n        >\n          {/* main content*/}\n          <View\n            style={{\n              flexDirection: \"column\",\n              flex: 1,\n              paddingTop: 10,\n              paddingLeft: 0,\n              paddingRight: 0,\n              paddingBottom: 14,\n              //backgroundColor: \"purple\",\n            }}\n          >\n            {/* user avatar and name section */}\n            <View\n              style={{\n                flex: 1,\n                justifyContent: \"flex-start\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                paddingBottom: 6,\n                //backgroundColor: \"cyan\",\n              }}\n            >\n              {UserInfo.smallAvatarComponent(item.user)}\n              <View\n                style={{\n                  flex: 1,\n                  flexDirection: \"row\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  paddingRight: 0,\n                  //backgroundColor: \"yellow\",\n                }}\n              >\n                <Text\n                  style={{\n                    marginLeft: 5,\n                    fontWeight: \"bold\",\n                    color: UIConstants.BLACK_TEXT_COLOR,\n                    fontSize: 16,\n                  }}\n                >\n                  {UserInfo.chatDisplayName(item.user)} {/*item._id*/}\n                </Text>\n                <View\n                  style={{\n                    marginLeft: 5,\n                    fontWeight: \"normal\",\n                    fontSize: 14,\n                  }}\n                >\n                  <MessageTime\n                    timestamp={timestamp}\n                    textStyle={{ fontSize: 11, color: UIConstants.BLACK_TEXT_COLOR }}\n                  />\n                </View>\n              </View>\n            </View>\n            {/* title */}\n            <View\n              style={{\n                paddingLeft: 0,\n                paddingTop: 0,\n                borderRadius: 0,\n                //backgroundColor: \"white\",\n              }}\n            >\n              <View style={{ flex: 1, flexDirection: \"row\" }}>\n                {item.event != null && (\n                  <Icon name=\"calendar\" style={{ color: \"black\", fontSize: 24 }} />\n                )}\n                <Text\n                  style={{\n                    paddingLeft: 0,\n                    fontSize: 16,\n                    fontWeight: \"bold\",\n                    color: UIConstants.BLACK_TEXT_COLOR,\n                  }}\n                >\n                  {item.title ?? \"[No Title]\"}\n                </Text>\n              </View>\n              {Globals.dev ? <Text style={{ fontSize: 10 }}>{item.id}</Text> : null}\n              {Globals.dev ? (\n                <Text style={{ fontSize: 10 }}>{JSON.stringify({ ...item, children: null })}</Text>\n              ) : null}\n            </View>\n\n            {/* message text */}\n            <View\n              style={{\n                paddingLeft: 0,\n                paddingTop: 0,\n                borderRadius: 0,\n                flex: 1,\n                flexDirection: \"row\",\n                //backgroundColor: \"cyan\",\n              }}\n            >\n              <View\n                style={{\n                  width: 200,\n                  //backgroundColor: \"cyan\"\n                }}\n              >\n                <Text\n                  numberOfLines={1}\n                  ellipsizeMode=\"tail\"\n                  style={{\n                    fontSize: 16,\n                    color: UIConstants.BLACK_TEXT_COLOR,\n                    flexGrow: 1,\n                  }}\n                >\n                  {(item.text ?? \"\").replace(/(\\r\\n|\\n|\\r)/gm, \" \")}\n                </Text>\n              </View>\n              <View style={{ flexGrow: 1 }}></View>\n              {/* replies */}\n              <View\n                style={{\n                  width: 100,\n                  //backgroundColor: \"purple\",\n                  flexDirection: \"row\",\n                }}\n              >\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"column\",\n                    //backgroundColor: \"lightgrey\",\n                    //borderRadius: 10,\n                    justifyContent: \"center\",\n                    alignItems: \"flex-end\",\n                  }}\n                >\n                  <Text\n                    style={{\n                      //backgroundColor: \"green\",\n                      paddingLeft: 0,\n                      fontSize: 14,\n                      fontWeight: item.unreadChildCount > 0 ? \"bold\" : \"normal\",\n                      color: UIConstants.BLACK_TEXT_COLOR,\n                    }}\n                  >\n                    {(item.children?.length ?? -1) > 1 || item.children?.length == 0\n                      ? (item.children?.length ?? -1) + \" replies\"\n                      : (item.children?.length ?? -1) + \" reply\"}\n                  </Text>\n                </View>\n              </View>\n            </View>\n            {item.event != null && item.event.summary != null && (\n              <View style={{ flexDirection: \"row\" }}>\n                <Text>{item.event.summary.accepted ?? 0} Accepted</Text>\n                <Text>{item.event.summary.declined ?? 0} Declined</Text>\n                <Text>{item.event.summary.not_responded ?? 0} Not Responded</Text>\n              </View>\n            )}\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n}\n","import React, { useState } from \"react\";\nimport { KeyboardAvoidingView, Modal, Text, TextInput, TouchableOpacity, View } from \"react-native\";\nimport { Avatar, Divider } from \"react-native-elements\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as UserInfo from \"./UserInfo\";\nimport Portal from \"./Portal\";\n\nexport default function ThreadMessageModal({ userInfo, group, visible, sendMessage, showModal }) {\n  const insets = useSafeAreaInsets();\n  const [text, setText] = useState(null);\n  const [title, setTitle] = useState(null);\n  //<KeyboardAvoidingView behavior=\"padding\" style={{ flex: 1, backgroundColor: \"white\" }}>\n  //</KeyboardAvoidingView>\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Portal>\n        {/* top close section */}\n        <View\n          style={{\n            height: 30,\n            paddingLeft: 8,\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <TouchableOpacity\n            onPress={() => {\n              showModal(false);\n            }}\n          >\n            <Text style={{ fontSize: 20, color: \"blue\" }}>Close</Text>\n          </TouchableOpacity>\n        </View>\n        {/* group name and post button section*/}\n        <View\n          style={{\n            height: 60,\n            flexDirection: \"column\",\n          }}\n        >\n          <View\n            style={{\n              //height: 100,\n              flex: 1,\n              paddingLeft: 8,\n              paddingRight: 4,\n              paddingTop: 8,\n              paddingBottom: 8,\n              flexDirection: \"row\",\n              //zIndex: Number.MAX_VALUE,\n            }}\n          >\n            <View\n              style={{\n                flexGrow: 1,\n                alignItems: \"flex-start\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Text style={{ fontSize: 20, fontWeight: \"bold\" }}>{group.name}</Text>\n            </View>\n            <View\n              style={{\n                width: 80,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <MyButtons.FormButton\n                text=\"POST\"\n                onPress={async () => {\n                  sendMessage(title, text).then(() => {\n                    showModal(false);\n                  });\n                }}\n              />\n            </View>\n          </View>\n          <Divider style={{}} width={1} color=\"darkgrey\" />\n        </View>\n        {/* message section */}\n        <View style={{ flexGrow: 1 }}>\n          {/* avatar */}\n          <View\n            style={{\n              height: 40,\n              paddingLeft: 10,\n              paddingRight: 10,\n              justifyContent: \"flex-start\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              paddingBottom: 0,\n              //backgroundColor: \"green\",\n            }}\n          >\n            {UserInfo.smallAvatarComponent(userInfo)}\n            <View\n              style={{\n                flex: 1,\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                paddingRight: 20,\n              }}\n            >\n              <Text\n                style={{\n                  marginLeft: 5,\n                  fontWeight: \"bold\",\n                  fontSize: 16,\n                }}\n              >\n                {UserInfo.chatDisplayName(userInfo)}\n              </Text>\n            </View>\n          </View>\n\n          {/* title */}\n          <View style={{ height: 50, paddingLeft: 10, paddingRight: 10 }}>\n            <TextInput\n              style={{\n                flex: 1,\n                borderWidth: 1,\n                borderRadius: 5,\n                margin: 0,\n                paddingTop: 0,\n                paddingBottom: 0,\n                paddingLeft: 10,\n                textAlign: \"left\",\n                fontSize: 16,\n                backgroundColor: \"white\",\n              }}\n              placeholder=\"Title\"\n              multiline={false}\n              autoFocus={true}\n              onChangeText={(text) => {\n                setTitle(text);\n              }}\n            />\n          </View>\n\n          {/* message */}\n          <View\n            style={{\n              flex: 1,\n              paddingTop: 10,\n              paddingBottom: 10,\n              paddingLeft: 10,\n              paddingRight: 10,\n            }}\n          >\n            <TextInput\n              style={{\n                flex: 1,\n                backgroundColor: \"blue\",\n                borderWidth: 1,\n                borderRadius: 5,\n                margin: 0,\n                paddingTop: 10,\n                paddingBottom: 0,\n                paddingLeft: 10,\n                textAlign: \"left\",\n                fontSize: 16,\n                backgroundColor: \"white\",\n              }}\n              multiline={true}\n              autoFocus={false}\n              onChangeText={(text) => {\n                setText(text);\n              }}\n            />\n          </View>\n        </View>\n      </Portal>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  useWindowDimensions,\n  View,\n  TextInput,\n} from \"react-native\";\nimport { Avatar } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport ThreadMessageModal from \"./ThreadMessageModal\";\nimport TimeAgo from \"react-timeago\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as Random from \"./Random\";\nimport * as Globals from \"./Globals\";\nimport * as UserInfo from \"./UserInfo\";\nimport * as UIConstants from \"./UIConstants\";\nexport default function CommentView({ item, user, onPress }) {\n  const timeAgo = ({ children }) => {\n    return (\n      <Text\n        style={{\n          marginLeft: 5,\n          fontWeight: \"normal\",\n          fontSize: 14,\n        }}\n      >\n        {children}\n      </Text>\n    );\n  };\n\n  if (item.user.uid == user.uid) {\n    return (\n      <View\n        style={{\n          flexDirection: \"row\",\n          flex: 1,\n          marginLeft: 40,\n          paddingTop: 0,\n          paddingLeft: 10,\n          paddingBottom: 0,\n          paddingRight: 10,\n          //backgroundColor: Random.randomColor(),\n        }}\n      >\n        {/* avatar view */}\n        <View\n          style={{\n            width: 40,\n            justifyContent: \"flex-start\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            backgroundColor: \"white\",\n          }}\n        >\n          {UserInfo.smallAvatarComponent(item.user)}\n        </View>\n\n        {/* user name + text */}\n        <View\n          style={{\n            flex: 1,\n            marginRight: 0,\n            paddingLeft: 10,\n            paddingRight: 10,\n            paddingTop: 5,\n            paddingBottom: 5,\n            borderRadius: 15,\n            backgroundColor: \"#daedf4\", //light blue\n            flexDirection: \"column\",\n          }}\n        >\n          {/* user name + time ago */}\n          <View\n            style={{\n              flexDirection: \"row\",\n              justifyContent: \"flex-start\",\n              alignItems: \"flex-start\",\n            }}\n          >\n            <Text\n              style={{\n                fontWeight: \"bold\",\n                fontSize: 14,\n                color: UIConstants.BLACK_TEXT_COLOR,\n              }}\n            >\n              {UserInfo.chatDisplayName(item.user)}\n            </Text>\n            <View\n              style={{\n                marginLeft: 10,\n                fontWeight: \"normal\",\n                fontSize: 14,\n              }}\n            >\n              <TimeAgo\n                date={item.createdAt}\n                style={{\n                  marginLeft: 5,\n                  fontWeight: \"normal\",\n                  fontSize: 14,\n                }}\n                component={timeAgo}\n              />\n            </View>\n          </View>\n          <View style={{ flex: 1, flexDirection: \"column\" }}>\n            {item.event != null && <Text>Going</Text>}\n            <Text\n              //numberOfLines={showMore[item.id] ? null : 4}\n              style={{\n                paddingLeft: 0,\n                fontSize: 14,\n                color: \"#333333\",\n              }}\n            >\n              {item.text}\n            </Text>\n            {Globals.dev && <Text style={{ fontSize: 8 }}>{item.id}</Text>}\n          </View>\n        </View>\n      </View>\n    );\n  } else {\n    return (\n      <View\n        style={{\n          flexDirection: \"row\",\n          flex: 1,\n          paddingTop: 0,\n          paddingLeft: 10,\n          paddingBottom: 0,\n          paddingRight: 10,\n          //backgroundColor: Random.randomColor(),\n        }}\n      >\n        {/* avatar view */}\n        <View\n          style={{\n            width: 40,\n            justifyContent: \"flex-start\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            backgroundColor: \"white\",\n          }}\n        >\n          {UserInfo.smallAvatarComponent(item.user)}\n        </View>\n\n        {/* user name + text */}\n        <View\n          style={{\n            flex: 1,\n            marginRight: 60,\n            paddingLeft: 10,\n            paddingRight: 10,\n            paddingTop: 5,\n            paddingBottom: 5,\n            borderRadius: 15,\n            backgroundColor: \"#EEEEEE\",\n            flexDirection: \"column\",\n          }}\n        >\n          {/* user name + time ago */}\n          <View\n            style={{\n              flexDirection: \"row\",\n              justifyContent: \"flex-start\",\n              alignItems: \"flex-start\",\n            }}\n          >\n            <Text\n              style={{\n                fontWeight: \"bold\",\n                fontSize: 14,\n                color: UIConstants.BLACK_TEXT_COLOR,\n              }}\n            >\n              {UserInfo.chatDisplayName(item.user)}\n            </Text>\n            <View\n              style={{\n                marginLeft: 10,\n                fontWeight: \"normal\",\n                fontSize: 14,\n              }}\n            >\n              <TimeAgo\n                date={item.createdAt}\n                style={{\n                  marginLeft: 5,\n                  fontWeight: \"normal\",\n                  fontSize: 14,\n                  color: \"#333333\",\n                }}\n                component={timeAgo}\n              />\n            </View>\n          </View>\n          <View style={{ flex: 1, flexDirection: \"column\" }}>\n            {item.event != null && <Text>Going</Text>}\n            <Text\n              //numberOfLines={showMore[item.id] ? null : 4}\n              style={{\n                paddingLeft: 0,\n                fontSize: 14,\n                color: UIConstants.BLACK_TEXT_COLOR,\n              }}\n            >\n              {item.text}\n            </Text>\n            {Globals.dev && <Text style={{ fontSize: 8 }}>{item._id}</Text>}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Divider } from \"react-native-elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Controller from \"./Controller\";\nimport GroupMembersModal from \"./GroupMembersModal\";\nimport * as MyButtons from \"./MyButtons\";\nimport Portal from \"./Portal\";\nimport Toolbar from \"./Toolbar\";\nimport * as UserInfo from \"./UserInfo\";\nimport * as Actions from \"./Actions\";\nimport MessageView from \"./MessageView\";\nimport * as MessageUtils from \"./MessageUtils\";\nimport { IconButton } from \"react-native-paper\";\nimport { Input } from \"react-native-elements\";\nimport CommentView from \"./CommentView\";\n\nimport {\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  useWindowDimensions,\n  View,\n  TextInput,\n  ScrollView,\n} from \"react-native\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\n\nexport default function MessageScreen({ groupId, messageId, onBack }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n\n  const { groupMap, orgsMap, messages, userMap, members } = useSelector((state) => {\n    return {\n      userinfo: state.main.userInfo,\n      schoolList: state.main.schoolList,\n      schoolMap: state.main.schoolMap,\n      groupList: state.main.groupList,\n      groupMap: state.main.groupMap,\n      orgsMap: state.main.orgsMap,\n      userMap: state.main.userMap,\n      messages: state.main.groupMessages[groupId] ?? [],\n      members: state.main.groupMembershipMap[groupId],\n    };\n  });\n  const group = groupMap[groupId];\n  const { height, width } = useWindowDimensions();\n  const windowWidth = width ?? 0;\n  const [membersModalVisible, setMembersModalVisible] = useState(false);\n  const message = MessageUtils.buildMessageWithChildren(\n    messageId,\n    messages,\n    userInfo,\n    null,\n    null,\n    userMap\n  );\n  const user = userMap[message.uid];\n\n  const sortedChildMessages = [...message.children] ?? [];\n  sortedChildMessages.sort((m1, m2) => {\n    return m1.timestamp - m2.timestamp;\n    //return 0;\n  });\n\n  const childMessages = sortedChildMessages.map((message) => {\n    const user = userMap[message.uid];\n    return {\n      _id: message.id,\n      text: message.text,\n      createdAt: new Date(message.timestamp),\n      user: {\n        _id: message.uid,\n        name: UserInfo.chatDisplayName(user),\n        avatarColor: UserInfo.avatarColor(user),\n      },\n    };\n  });\n\n  // send message callback function\n  const sendMessage = useCallback(async (text) => {\n    const groupName = group.name;\n    const fromName = UserInfo.chatDisplayName(userInfo);\n    setText(\"\");\n    return await Controller.sendMessage(dispatch, userInfo, groupId, text, message.id, {\n      groupName,\n      fromName,\n    });\n  }, []);\n\n  const renderMessage = ({ item }) => {\n    return <CommentView item={item} width={windowWidth} />;\n  };\n  /*\n  useEffect(async () => {\n    // update last viewed callback function\n    if (messages.length > 0) {\n      const maxTimestampMessage = messages.reduce((prev, current) =>\n        prev.timestamp > current.timestamp ? prev : current\n      );\n      await Controller.setUserGroupLastViewedTimestamp(userInfo, group.id, maxTimestampMessage.timestamp);\n    }\n    Controller.markMessagesRead(\n      userInfo,\n      messages.map((m) => m._id)\n    );\n  }, [messages]);\n  */\n  const [text, setText] = useState(\"\");\n\n  return (\n    <Portal backgroundColor={/*UIConstants.DEFAULT_BACKGROUND*/ \"white\"}>\n      <View style={{ flexBasis: 50 }}>\n        <TopBarMiddleContentSideButtons\n          left={\n            <MyButtons.MenuButton\n              icon=\"arrow-left\"\n              text=\"Back\"\n              onPress={() => {\n                onBack();\n              }}\n              color=\"black\"\n            />\n          }\n        />\n      </View>\n      {/* main message section */}\n      <View\n        style={{\n          flexDirection: \"column\",\n          height: 80,\n          width: width,\n          paddingTop: 10,\n          paddingLeft: 10,\n          paddingRight: 10,\n          paddingBottom: 14,\n          backgroundColor: \"purple\",\n        }}\n      >\n        <View\n          style={{\n            width: width,\n            justifyContent: \"flex-start\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingBottom: 6,\n          }}\n        >\n          {UserInfo.avatarComponent(user)}\n          <View\n            style={{\n              flex: 1,\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              paddingRight: 20,\n              backgroundColor: \"white\",\n            }}\n          >\n            <Text\n              style={{\n                marginLeft: 5,\n                fontWeight: \"bold\",\n                fontSize: 16,\n              }}\n            >\n              {UserInfo.chatDisplayName(user)}\n            </Text>\n          </View>\n        </View>\n        <View\n          style={{\n            width: width - 20,\n            paddingLeft: 0,\n            paddingTop: 0,\n            borderRadius: 0,\n            backgroundColor: \"white\",\n          }}\n        >\n          <Text\n            //numberOfLines={showMore[item.id] ? null : 4}\n            style={{\n              paddingLeft: 0,\n              fontSize: 18,\n              width: width - 20,\n            }}\n          >\n            {message.text}\n          </Text>\n        </View>\n        <Divider style={{}} width={1} color=\"darkgrey\" />\n      </View>\n\n      {/* comments section */}\n      <View style={{ flex: 1 }}>\n        <ScrollView style={{ flexDirection: \"column\" }}>\n          {childMessages.map((message) => {\n            return <CommentView item={message} width={windowWidth} />;\n          })}\n        </ScrollView>\n      </View>\n      {/* reply text input section */}\n      <View\n        style={{\n          height: 60,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          paddingLeft: 10,\n          paddingRight: 10,\n          paddingBottom: 0,\n          width: windowWidth,\n          backgroundColor: \"cyan\",\n          flexDirection: \"row\",\n        }}\n      >\n        <TextInput\n          value={text}\n          style={{\n            flex: 1,\n            backgroundColor: \"blue\",\n            margin: 0,\n            paddingTop: 10,\n            paddingBottom: 10,\n            paddingLeft: 10,\n            textAlign: \"left\",\n            fontSize: 16,\n            width: windowWidth,\n            backgroundColor: \"white\",\n            borderLeftWidth: 1,\n            borderTopWidth: 1,\n            borderRightWidth: 1,\n            borderBottomWidth: 1,\n            borderTopLeftRadius: 5,\n            borderTopRightRadius: 5,\n            borderBottomRightRadius: 5,\n            borderBottomLeftRadius: 5,\n          }}\n          placeholder={\"Reply...\"}\n          multiline={true}\n          autoFocus={false}\n          onChangeText={(text) => {\n            setText(text);\n          }}\n        />\n        {text != null && text.length > 0 && (\n          <IconButton\n            icon=\"arrow-up-circle\"\n            color={\"blue\"}\n            size={38}\n            onPress={() => {\n              sendMessage(text);\n            }}\n          />\n        )}\n      </View>\n      {/*\n      <Toolbar />\n          */}\n    </Portal>\n  );\n}\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport {\n  Modal,\n  Text,\n  View,\n  SafeAreaView,\n  ScrollView,\n  TextInput,\n  Dimensions,\n  KeyboardAvoidingView,\n  TouchableOpacity,\n  Alert,\n  StyleSheet,\n  Button,\n} from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as UserInfo from \"./UserInfo\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\nimport * as MyButtons from \"./MyButtons\";\nimport GroupInviteModal from \"./GroupInviteModal\";\nimport Portal from \"./Portal\";\nimport * as MessageUtils from \"./MessageUtils\";\nimport { Divider } from \"react-native-elements\";\nimport CommentView from \"./CommentView\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { IconButton } from \"react-native-paper\";\nimport * as Controller from \"./Controller\";\nimport { userInfo } from \"./Actions\";\nimport * as Calendar from \"expo-calendar\";\nimport * as Globals from \"./Globals\";\nimport * as UIConstants from \"./UIConstants\";\n\nexport default function MessagesContainer({ groupId, messageId, visible, closeModal }) {\n  const user = useSelector((state) => state.main.userInfo);\n  const { messages, groupMap, userMessagesMap, userMap } = useSelector((state) => {\n    return {\n      groupMap: state.main.groupMap,\n      messages: state.main.groupMessages[groupId] ?? [],\n      userMessagesMap: state.main.userMessagesMap,\n      userMap: state.main.userMap,\n    };\n  });\n  const message = MessageUtils.buildMessageWithChildren(\n    messageId,\n    messages,\n    user,\n    userMessagesMap,\n    null,\n    userMap\n  );\n  console.log(\"built message with children: \" + message.id);\n\n  const group = groupMap[groupId];\n  if (message.event == null) {\n    return (\n      <MessageModal\n        user={user}\n        group={group}\n        message={message}\n        visible={visible}\n        closeModal={closeModal}\n        userMap={userMap}\n      />\n    );\n  } else {\n    return (\n      <EventMessageModal\n        user={user}\n        group={group}\n        message={message}\n        visible={visible}\n        closeModal={closeModal}\n        userMap={userMap}\n      />\n    );\n  }\n}\n\nfunction MessageModal({ user, group, message, visible, closeModal, userMap }) {\n  const dispatch = useDispatch();\n  const sortedChildMessages = [...message.children] ?? [];\n  sortedChildMessages.sort((m1, m2) => {\n    return m1.timestamp - m2.timestamp;\n    //return 0;\n  });\n\n  const childMessages = sortedChildMessages;\n\n  // send message callback function\n  const sendMessage = useCallback(async (text) => {\n    const groupName = group.name;\n    const fromName = UserInfo.chatDisplayName(user);\n    setText(\"\");\n    Alert.alert(\"sending message papa_id: \" + message.id);\n    await Controller.sendReply(dispatch, user, group.id, text, message.id, {\n      groupName,\n      fromName,\n    });\n    scrollViewRef.current.scrollToEnd({ animated: true });\n  }, []);\n\n  const [text, setText] = useState(\"\");\n  const scrollViewRef = useRef();\n  const insets = useSafeAreaInsets();\n  const windowHeight = Dimensions.get(\"window\").height - insets.top - insets.bottom;\n  const topBarHeight = 40;\n  const replyBarHeight = 80;\n\n  useEffect(async () => {\n    let markRead = [];\n    if (message.status != \"read\") {\n      markRead.push(message.id);\n    }\n    const unreadChildMessages = (message.children ?? []).filter((m) => m.status != \"read\");\n    markRead = markRead.concat(unreadChildMessages.map((m) => m.id));\n    Controller.markMessagesRead(user, markRead);\n  }, [message]);\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Portal\n        backgroundColor={UIConstants.DEFAULT_BACKGROUND}\n        //backgroundColor=\"green\"\n      >\n        {/* top bar */}\n        <TopBarMiddleContentSideButtons\n          backgroundColor={UIConstants.DEFAULT_BACKGROUND}\n          height={topBarHeight}\n          left={\n            <MyButtons.MenuButton\n              icon=\"arrow-left\"\n              text=\"Back\"\n              onPress={() => {\n                closeModal();\n              }}\n              color=\"black\"\n            />\n          }\n          center={null}\n          right={null}\n        />\n\n        {/* main content */}\n        <KeyboardAvoidingView\n          style={{\n            flex: 1,\n            backgroundColor: \"white\",\n          }}\n          behavior=\"padding\"\n          keyboardVerticalOffset={40}\n          enabled\n        >\n          <ScrollView\n            ref={scrollViewRef}\n            style={{ flex: 1 }}\n            //onContentSizeChange={() => scrollViewRef.current.scrollToEnd({ animated: true })}\n          >\n            {/* parent message */}\n            <View\n              style={{\n                flexDirection: \"column\",\n                paddingTop: 10,\n                paddingLeft: 10,\n                paddingRight: 10,\n                paddingBottom: 14,\n                //backgroundColor: \"purple\",\n              }}\n            >\n              <View\n                style={{\n                  justifyContent: \"flex-start\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  paddingBottom: 6,\n                }}\n              >\n                {UserInfo.smallAvatarComponent(user)}\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    paddingRight: 20,\n                    //backgroundColor: \"white\",\n                  }}\n                >\n                  <Text\n                    style={{\n                      marginLeft: 5,\n                      fontWeight: \"bold\",\n                      fontSize: 14,\n                      color: UIConstants.BLACK_TEXT_COLOR,\n                    }}\n                  >\n                    {UserInfo.chatDisplayName(user)}\n                  </Text>\n                </View>\n              </View>\n              <View\n                style={{\n                  paddingLeft: 0,\n                  paddingTop: 0,\n                  borderRadius: 0,\n                }}\n              >\n                <Text\n                  //numberOfLines={showMore[item.id] ? null : 4}\n                  style={{\n                    paddingLeft: 0,\n                    fontWeight: \"bold\",\n                    fontSize: 16,\n                    color: UIConstants.BLACK_TEXT_COLOR,\n                  }}\n                >\n                  {message.title}\n                </Text>\n                <Text\n                  //numberOfLines={showMore[item.id] ? null : 4}\n                  style={{\n                    paddingLeft: 0,\n                    paddingTop: 8,\n                    fontSize: 14,\n                    color: UIConstants.BLACK_TEXT_COLOR,\n                  }}\n                >\n                  {message.text}\n                </Text>\n                {Globals.dev && <Text style={{ fontSize: 8 }}>{JSON.stringify(message)}</Text>}\n              </View>\n            </View>\n            <Divider style={{}} width={1} color=\"darkgrey\" />\n            {/* comments section */}\n            <View style={{ paddingTop: 10, flex: 1 }}>\n              {childMessages.map((message) => {\n                return (\n                  <View style={{ paddingBottom: 10 }}>\n                    <CommentView item={message} user={user} />\n                  </View>\n                );\n              })}\n            </View>\n          </ScrollView>\n          {/* reply text input section */}\n          <View\n            style={{\n              //height: replyBarHeight,\n              height: replyBarHeight,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              paddingLeft: 10,\n              paddingRight: 10,\n              paddingBottom: 0,\n              //backgroundColor: \"cyan\",\n              flexDirection: \"row\",\n            }}\n          >\n            <TextInput\n              value={text}\n              style={{\n                flex: 1,\n                backgroundColor: \"blue\",\n                margin: 0,\n                paddingTop: 10,\n                paddingBottom: 10,\n                //paddingLeft: 10,\n                textAlign: \"left\",\n                fontSize: 16,\n                backgroundColor: \"white\",\n                borderLeftWidth: 1,\n                borderTopWidth: 1,\n                borderRightWidth: 1,\n                borderBottomWidth: 1,\n                borderTopLeftRadius: 5,\n                borderTopRightRadius: 5,\n                borderBottomRightRadius: 5,\n                borderBottomLeftRadius: 5,\n              }}\n              placeholder={\"Reply...\"}\n              multiline={true}\n              autoFocus={false}\n              onChangeText={(text) => {\n                setText(text);\n              }}\n            />\n            {text != null && text.length > 0 && (\n              <IconButton\n                icon=\"arrow-up-circle\"\n                color={\"blue\"}\n                size={38}\n                onPress={() => {\n                  sendMessage(text);\n                }}\n              />\n            )}\n          </View>\n        </KeyboardAvoidingView>\n      </Portal>\n    </Modal>\n  );\n}\n\nfunction EventMessageModal({ group, message, user, userMap, visible, closeModal }) {\n  const dispatch = useDispatch();\n  const sortedChildMessages = [...message.children] ?? [];\n  sortedChildMessages.sort((m1, m2) => {\n    return m1.timestamp - m2.timestamp;\n    //return 0;\n  });\n\n  const childMessages = sortedChildMessages.map((message) => {\n    const user = userMap[message.uid];\n    return {\n      ...message,\n      _id: message.id,\n      text: message.text,\n      createdAt: new Date(message.timestamp),\n      user: {\n        _id: message.uid,\n        name: UserInfo.chatDisplayName(user),\n        avatarColor: UserInfo.avatarColor(user),\n      },\n    };\n  });\n\n  const sendEventReply = useCallback(async (status, text) => {\n    const groupName = group.name;\n    const fromName = UserInfo.chatDisplayName(user);\n    setText(\"\");\n    await Controller.sendEventReply(dispatch, user, group.id, status, text, message.id, {\n      groupName,\n      fromName,\n    });\n    scrollViewRef.current.scrollToEnd({ animated: true });\n  }, []);\n\n  const [text, setText] = useState(\"\");\n  const [calendar, setCalendar] = useState(null);\n  const [calendars, setCalendars] = useState(null);\n  const [showCalendarSelection, setShowCalendarSelection] = useState(false);\n  const scrollViewRef = useRef();\n  const insets = useSafeAreaInsets();\n  const windowHeight = Dimensions.get(\"window\").height - insets.top - insets.bottom;\n  const topBarHeight = 64;\n  const replyBarHeight = 80;\n\n  useEffect(async () => {\n    let markRead = [];\n    if (message.status != \"read\") {\n      markRead.push(message.id);\n    }\n    const unreadChildMessages = (message.children ?? []).filter((m) => m.status != \"read\");\n    markRead = markRead.concat(unreadChildMessages.map((m) => m.id));\n    Controller.markMessagesRead(user, markRead);\n  }, [message]);\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Portal>\n        {/* top bar */}\n        <TopBarMiddleContentSideButtons\n          height={topBarHeight}\n          left={\n            <MyButtons.MenuButton\n              icon=\"arrow-left\"\n              text=\"Back\"\n              onPress={() => {\n                closeModal();\n              }}\n              color=\"black\"\n            />\n          }\n          center={null}\n          right={null}\n        />\n\n        {/* main content */}\n        <KeyboardAvoidingView\n          style={{\n            flex: 1,\n            //backgroundColor: \"green\",\n          }}\n          behavior=\"padding\"\n          keyboardVerticalOffset={40}\n          enabled\n        >\n          <ScrollView\n            ref={scrollViewRef}\n            style={{ flex: 1 }}\n            //onContentSizeChange={() => scrollViewRef.current.scrollToEnd({ animated: true })}\n          >\n            {/* parent message */}\n            <View\n              style={{\n                flexDirection: \"column\",\n                paddingTop: 10,\n                paddingLeft: 10,\n                paddingRight: 10,\n                paddingBottom: 14,\n                //backgroundColor: \"purple\",\n              }}\n            >\n              <View\n                style={{\n                  justifyContent: \"flex-start\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  paddingBottom: 6,\n                }}\n              >\n                {UserInfo.avatarComponent(user)}\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    paddingRight: 20,\n                    //backgroundColor: \"white\",\n                  }}\n                >\n                  <Text\n                    style={{\n                      marginLeft: 5,\n                      fontWeight: \"bold\",\n                      fontSize: 16,\n                    }}\n                  >\n                    {UserInfo.chatDisplayName(user)}\n                  </Text>\n                </View>\n              </View>\n              <View\n                style={{\n                  paddingLeft: 0,\n                  paddingTop: 0,\n                  borderRadius: 0,\n                }}\n              >\n                <Text\n                  //numberOfLines={showMore[item.id] ? null : 4}\n                  style={{\n                    paddingLeft: 0,\n                    fontWeight: \"bold\",\n                    fontSize: 20,\n                    color: UIConstants.BLACK_TEXT_COLOR,\n                  }}\n                >\n                  {message.title}\n                </Text>\n                <Text\n                  //numberOfLines={showMore[item.id] ? null : 4}\n                  style={{\n                    paddingLeft: 0,\n                    fontSize: 18,\n                  }}\n                >\n                  {message.text}\n                </Text>\n              </View>\n              {/* accept/decline bar */}\n              <View style={{ flex: 1, flexDirection: \"row\", justifyContent: \"space-evenly\" }}>\n                <TouchableOpacity\n                  onPress={() => {\n                    sendEventReply(\"accept\", null);\n                    /*\n                    Alert.alert(\"Book in Calendar?\", null, [\n                      {\n                        text: \"Yes\",\n                        onPress: async () => {\n                          const { status } = await Calendar.requestCalendarPermissionsAsync();\n                          if (status === \"granted\") {\n                            const calendars = await Calendar.getCalendarsAsync(\n                              Calendar.EntityTypes.EVENT\n                            );\n                            //alert(\"Here are all your calendars:\" + JSON.stringify(calendars));\n                            setCalendars(calendars);\n                            //alert(\"calendar[0]:\" + JSON.stringify(calendars[0]));\n                            //setCalendar(calendars[0]);\n                            setShowCalendarSelection(true);\n                          }\n                        },\n                      },\n                      {\n                        text: \"No\",\n                        onPress: () => console.log(\"Cancel Pressed\"),\n                        style: \"cancel\",\n                      },\n                    ]);\n                    */\n                  }}\n                >\n                  {(message.event.users ?? {})[user.uid]?.status === \"accept\" && (\n                    <Text style={{ backgroundColor: \"green\" }}>Going</Text>\n                  )}\n                  {(message.event.users ?? {})[user.uid]?.status != \"accept\" && <Text>Going</Text>}\n                </TouchableOpacity>\n                <TouchableOpacity\n                  onPress={() => {\n                    sendEventReply(\"decline\", null);\n                  }}\n                >\n                  <Text>Not Going</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  onPress={() => {\n                    sendEventReply(\"tentative\", null);\n                  }}\n                >\n                  <Text>Don't Know Yet</Text>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                  <Text>...</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n            <Divider style={{}} width={1} color=\"darkgrey\" />\n            {/* comments section */}\n            <View style={{ flex: 1, marginTop: 10, backgroundColor: \"cyan\" }}>\n              {childMessages.map((message) => {\n                return <CommentView item={message} user={user} />;\n              })}\n            </View>\n          </ScrollView>\n          {/* reply text input section */}\n          <View\n            style={{\n              height: replyBarHeight,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              paddingLeft: 10,\n              paddingRight: 10,\n              paddingBottom: 0,\n              flexDirection: \"row\",\n            }}\n          >\n            <TextInput\n              value={text}\n              style={{\n                flex: 1,\n                backgroundColor: \"blue\",\n                margin: 0,\n                paddingTop: 10,\n                paddingBottom: 10,\n                //paddingLeft: 10,\n                textAlign: \"left\",\n                fontSize: 16,\n                backgroundColor: \"white\",\n                borderLeftWidth: 1,\n                borderTopWidth: 1,\n                borderRightWidth: 1,\n                borderBottomWidth: 1,\n                borderTopLeftRadius: 5,\n                borderTopRightRadius: 5,\n                borderBottomRightRadius: 5,\n                borderBottomLeftRadius: 5,\n              }}\n              placeholder={\"Reply...\"}\n              multiline={true}\n              autoFocus={false}\n              onChangeText={(text) => {\n                setText(text);\n              }}\n            />\n            {text != null && text.length > 0 && (\n              <IconButton\n                icon=\"arrow-up-circle\"\n                color={\"blue\"}\n                size={38}\n                onPress={() => {\n                  sendMessage(text);\n                }}\n              />\n            )}\n          </View>\n        </KeyboardAvoidingView>\n      </Portal>\n\n      {showCalendarSelection && (\n        <View\n          style={[\n            StyleSheet.absoluteFill,\n            {\n              backgroundColor: \"rgba(0,0,0,0.4)\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            },\n          ]}\n        >\n          <SafeAreaView>\n            <ScrollView style={{ height: 200, backgroundColor: \"cyan\" }}>\n              {(calendars ?? []).map((calendar) => {\n                return (\n                  <Button\n                    disabled={calendar == null}\n                    title={\n                      \"Choose \" +\n                      (calendar?.title ?? \"null\") +\n                      \"[\" +\n                      (calendar?.source.name ?? \"null\") +\n                      \"]\"\n                    }\n                    onPress={() => {\n                      createEvent(calendar).then((eventId) => {\n                        setShowCalendarSelection(false);\n                      });\n                    }}\n                  />\n                );\n              })}\n            </ScrollView>\n          </SafeAreaView>\n        </View>\n      )}\n    </Modal>\n  );\n}\n\nasync function createEvent(calendar) {\n  let dateMs = Date.parse(\"2022-04-11\");\n  let startDate = new Date(dateMs);\n  let endDate = new Date(dateMs + 2 * 60 * 60 * 1000);\n\n  Calendar.createEventAsync(calendar?.id, {\n    title: \"ilya test 3\",\n    startDate: startDate,\n    endDate: endDate,\n    timeZone: \"America/New_York\",\n    location: \"Ilya's Bedroom\",\n  }).then((eventId) => {\n    console.log(\"booked: \" + eventId);\n    return eventId;\n  });\n  // console.log(`calendar ID is: ${id}`)\n}\n","import React, { useState } from \"react\";\nimport { KeyboardAvoidingView, Modal, Text, TextInput, TouchableOpacity, View } from \"react-native\";\nimport { Avatar, Divider } from \"react-native-elements\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as UserInfo from \"./UserInfo\";\nimport Portal from \"./Portal\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport moment from \"moment\";\n\nexport default function NewEventModal({ userInfo, group, visible, sendEvent, showModal }) {\n  const insets = useSafeAreaInsets();\n  const [text, setText] = useState(null);\n  const [title, setTitle] = useState(null);\n  const [date, setDate] = useState(moment());\n  const [startTime, setStartTime] = useState(moment());\n  const [endTime, setEndTime] = useState(moment());\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [showStartTimePicker, setShowStartTimePicker] = useState(false);\n  const [showEndTimePicker, setShowEndTimePicker] = useState(false);\n\n  const onDateChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setDate(moment(currentDate));\n    setShowDatePicker(false);\n  };\n\n  const onStartTimeChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setStartTime(moment(currentDate));\n    setShowStartTimePicker(false);\n  };\n\n  const onEndTimeChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setEndTime(moment(currentDate));\n    setShowEndTimePicker(false);\n  };\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Portal>\n        {/* top close section */}\n        <View\n          style={{\n            height: 30,\n            paddingLeft: 8,\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <TouchableOpacity\n            onPress={() => {\n              showModal(false);\n            }}\n          >\n            <Text style={{ fontSize: 20, color: \"blue\" }}>Close</Text>\n          </TouchableOpacity>\n        </View>\n        {/* group name and post button section*/}\n        <View\n          style={{\n            height: 60,\n            flexDirection: \"column\",\n          }}\n        >\n          <View\n            style={{\n              //height: 100,\n              flex: 1,\n              paddingLeft: 8,\n              paddingRight: 4,\n              paddingTop: 8,\n              paddingBottom: 8,\n              flexDirection: \"row\",\n              //zIndex: Number.MAX_VALUE,\n            }}\n          >\n            <View\n              style={{\n                flexGrow: 1,\n                alignItems: \"flex-start\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Text style={{ fontSize: 20, fontWeight: \"bold\" }}>{group.name}</Text>\n            </View>\n            <View\n              style={{\n                width: 80,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <MyButtons.FormButton\n                text=\"POST\"\n                onPress={async () => {\n                  const startDate = moment();\n                  startDate.set({\n                    year: date.year,\n                    month: date.month,\n                    date: date.date,\n                    hour: startTime.get(\"hour\"),\n                    minute: startTime.get(\"minute\"),\n                  });\n                  const endDate = moment();\n                  startDate.set({\n                    year: date.year,\n                    month: date.month,\n                    date: date.date,\n                    hour: endTime.get(\"hour\"),\n                    minute: endTime.get(\"minute\"),\n                  });\n                  sendEvent(title, text, startDate.format(), endDate.format()).then(() => {\n                    showModal(false);\n                  });\n                }}\n              />\n            </View>\n          </View>\n          <Divider style={{}} width={1} color=\"darkgrey\" />\n        </View>\n        {/* message section */}\n        <View style={{ flexGrow: 1 }}>\n          {/* avatar */}\n          <View\n            style={{\n              height: 40,\n              paddingLeft: 10,\n              paddingRight: 10,\n              justifyContent: \"flex-start\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              paddingBottom: 0,\n              //backgroundColor: \"green\",\n            }}\n          >\n            {UserInfo.smallAvatarComponent(userInfo)}\n            <View\n              style={{\n                flex: 1,\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                paddingRight: 20,\n              }}\n            >\n              <Text\n                style={{\n                  marginLeft: 5,\n                  fontWeight: \"bold\",\n                  fontSize: 16,\n                }}\n              >\n                {UserInfo.chatDisplayName(userInfo)}\n              </Text>\n            </View>\n          </View>\n\n          {/* title */}\n          <View style={{ height: 50, paddingLeft: 10, paddingRight: 10 }}>\n            <TextInput\n              style={{\n                flex: 1,\n                borderWidth: 1,\n                borderRadius: 5,\n                margin: 0,\n                paddingTop: 0,\n                paddingBottom: 0,\n                paddingLeft: 10,\n                textAlign: \"left\",\n                fontSize: 16,\n                backgroundColor: \"white\",\n              }}\n              placeholder=\"Title\"\n              multiline={false}\n              autoFocus={true}\n              onChangeText={(text) => {\n                setTitle(text);\n              }}\n            />\n          </View>\n          {/* Starts */}\n          <View\n            style={{\n              marginTop: 10,\n              paddingLeft: 10,\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              height: 100,\n            }}\n          >\n            <View style={{ flex: 1, flexDirection: \"row\", alignItems: \"center\" }}>\n              <Text style={{ width: 50, fontSize: 16 }}>Date: </Text>\n              <TouchableOpacity\n                onPress={() => {\n                  setShowDatePicker(!showDatePicker);\n                }}\n                style={{ backgroundColor: \"lightgrey\", padding: 10, borderRadius: 10 }}\n              >\n                <Text style={{ width: 90, fontSize: 16 }}>{date.format(\"L\")}</Text>\n              </TouchableOpacity>\n            </View>\n            <View style={{ flex: 1, flexDirection: \"row\", alignItems: \"center\" }}>\n              <Text style={{ width: 50, fontSize: 16 }}>Start: </Text>\n              <TouchableOpacity\n                onPress={() => {\n                  setShowStartTimePicker(!showStartTimePicker);\n                }}\n                style={{ backgroundColor: \"lightgrey\", padding: 10, borderRadius: 10 }}\n              >\n                <Text style={{ width: 90, fontSize: 16 }}>{startTime.format(\"LT\")}</Text>\n              </TouchableOpacity>\n              <Text style={{ marginLeft: 20, width: 50, fontSize: 16 }}>End: </Text>\n              <TouchableOpacity\n                onPress={() => {\n                  setShowEndTimePicker(!showEndTimePicker);\n                }}\n                style={{ backgroundColor: \"lightgrey\", padding: 10, borderRadius: 10 }}\n              >\n                <Text style={{ width: 100, fontSize: 16 }}>{endTime.format(\"LT\")}</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n\n          {/* message */}\n          <View\n            style={{\n              flex: 1,\n              paddingTop: 10,\n              paddingBottom: 10,\n              paddingLeft: 10,\n              paddingRight: 10,\n            }}\n          >\n            <TextInput\n              style={{\n                flex: 1,\n                backgroundColor: \"blue\",\n                borderWidth: 1,\n                borderRadius: 5,\n                margin: 0,\n                paddingTop: 10,\n                paddingBottom: 0,\n                paddingLeft: 10,\n                textAlign: \"left\",\n                fontSize: 16,\n                backgroundColor: \"white\",\n              }}\n              multiline={true}\n              autoFocus={false}\n              onChangeText={(text) => {\n                setText(text);\n              }}\n              placeholder=\"Details...\"\n            />\n          </View>\n        </View>\n        <Modal visible={showDatePicker} animationType={\"slide\"}>\n          <DateTimePicker\n            display={\"inline\"}\n            mode={\"date\"}\n            value={startTime.toDate()}\n            onChange={onDateChange}\n          />\n        </Modal>\n        <Modal visible={showStartTimePicker} animationType={\"slide\"}>\n          <DateTimePicker\n            display={\"spinner\"}\n            mode={\"time\"}\n            value={startTime.toDate()}\n            onChange={onStartTimeChange}\n          />\n        </Modal>\n        <Modal visible={showEndTimePicker} animationType={\"slide\"}>\n          <DateTimePicker\n            display={\"spinner\"}\n            mode={\"time\"}\n            value={endTime.toDate()}\n            onChange={onEndTimeChange}\n          />\n        </Modal>\n      </Portal>\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, SafeAreaView } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as UserInfo from \"./UserInfo\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\nimport * as MyButtons from \"./MyButtons\";\nimport GroupInviteModal from \"./GroupInviteModal\";\nimport Portal from \"./Portal\";\n\nexport default function FacePile({ userIds }) {\n  const dispatch = useDispatch();\n  const { userMap } = useSelector((state) => {\n    return {\n      userMap: state.main.userMap,\n    };\n  });\n\n  const components = userIds.map((uid, index) => {\n    const user = userMap[uid];\n    return (\n      <View key={index} style={{ position: \"relative\", left: -(index * 10), zIndex: -index }}>\n        {UserInfo.smallAvatarComponent(user, null, true)}\n      </View>\n    );\n  });\n\n  return <View style={{ flexDirection: \"row\" }}>{components}</View>;\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Divider, Badge } from \"react-native-elements\";\nimport { IconButton } from \"react-native-paper\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Controller from \"./Controller\";\nimport GroupMembersModal from \"./GroupMembersModal\";\nimport * as MyButtons from \"./MyButtons\";\nimport Portal from \"./Portal\";\nimport Toolbar from \"./Toolbar\";\nimport * as UserInfo from \"./UserInfo\";\nimport * as Actions from \"./Actions\";\nimport MessageView from \"./MessageView\";\nimport * as MessageUtils from \"./MessageUtils\";\nimport MessageScreen from \"./MessageScreen\";\nimport MessageModal from \"./MessageModal\";\nimport ThreadMessageModal from \"./ThreadMessageModal\";\nimport NewEventModal from \"./NewEventModal\";\nimport FacePile from \"./FacePile\";\nimport * as Globals from \"./Globals\";\nimport * as UIConstants from \"./UIConstants\";\nimport {\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  useWindowDimensions,\n  View,\n  Dimensions,\n  TextInput,\n} from \"react-native\";\nimport { Modal } from \"react-native-paper\";\nimport TopBarLeftContentSideButton from \"./TopBarLeftContentSideButton\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\nexport default function GroupScreen({ groupId }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n\n  const { groupMap, orgsMap, messages, userMap, members, userMessagesMap } = useSelector(\n    (state) => {\n      return {\n        userinfo: state.main.userInfo,\n        schoolList: state.main.schoolList,\n        schoolMap: state.main.schoolMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        orgsMap: state.main.orgsMap,\n        userMap: state.main.userMap,\n        messages: state.main.groupMessages[groupId] ?? [],\n        members: state.main.groupMembershipMap[groupId],\n        userMessagesMap: state.main.userMessagesMap,\n      };\n    }\n  );\n  const { height, width } = useWindowDimensions();\n  const windowWidth = width ?? 0;\n  const [membersModalVisible, setMembersModalVisible] = useState(false);\n  const [messagesModalVisible, setMessagesModalVisible] = useState(null);\n  const [showNewMessageModal, setShowNewMessageModal] = useState(false);\n  const [showNewEventModal, setShowNewEventModal] = useState(false);\n  const group = groupMap[groupId];\n\n  const FlatListItemSeparator = () => {\n    return (\n      <View\n        style={{\n          height: 6,\n          width: \"100%\",\n          backgroundColor: \"lightgrey\",\n        }}\n      />\n    );\n  };\n\n  const rootMessages = MessageUtils.buildRootMessagesWithChildren(\n    messages,\n    userInfo,\n    userMessagesMap,\n    null,\n    userMap\n  );\n  const sortedMessages = [...rootMessages] ?? [];\n  sortedMessages.sort((m1, m2) => {\n    return m2.lastUpdated - m1.lastUpdated;\n    //return 0;\n  });\n\n  const org = orgsMap[group?.orgId];\n  // send message callback function\n  const sendMessage = useCallback(async (title, text) => {\n    const groupName = group.name;\n    const fromName = UserInfo.chatDisplayName(userInfo);\n    return await Controller.sendMessage(\n      dispatch,\n      userInfo,\n      groupId,\n      title,\n      text,\n      null, //papa id\n      {\n        groupName,\n        fromName,\n      }\n    );\n  }, []);\n\n  const sendEventMessage = useCallback(async (title, text, startDate, endDate) => {\n    const groupName = group.name;\n    const fromName = UserInfo.chatDisplayName(userInfo);\n    return await Controller.sendEventMessage(\n      dispatch,\n      userInfo,\n      groupId,\n      title,\n      text,\n      startDate,\n      endDate,\n      null, //papa id\n      {\n        groupName,\n        fromName,\n      }\n    );\n  }, []);\n\n  const renderMessage = ({ item }) => {\n    const onPress = () => {\n      setMessagesModalVisible(item.id);\n    };\n    return <MessageView item={item} onPress={onPress} />;\n  };\n  useEffect(async () => {\n    // update last viewed callback function\n    if (messages.length > 0) {\n      const maxTimestampMessage = messages.reduce((prev, current) =>\n        prev.timestamp > current.timestamp ? prev : current\n      );\n      await Controller.setUserGroupLastViewedTimestamp(\n        userInfo,\n        group.id,\n        maxTimestampMessage.timestamp\n      );\n    }\n    Controller.markMessagesRead(\n      userInfo,\n      messages.map((m) => m.id)\n    );\n  }, [messages]);\n\n  const insets = useSafeAreaInsets();\n  const windowHeight = Dimensions.get(\"window\").height - insets.top - insets.bottom;\n  const topBarHeight = 64;\n  const newMessageHeight = 80;\n  const bottomBarHeight = 64;\n  return (\n    <Portal\n      backgroundColor={UIConstants.DEFAULT_BACKGROUND}\n      //backgroundColor=\"green\"\n    >\n      {/* top bar section */}\n      <View\n        style={{\n          //backgroundColor: \"whitesmoke\",\n          flexDirection: \"column\",\n          height: topBarHeight,\n        }}\n      >\n        {/* group name and members row */}\n        <View\n          style={[\n            {\n              height: topBarHeight - 1,\n              paddingLeft: 4,\n              paddingRight: 4,\n              paddingTop: 8,\n              paddingBottom: 8,\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              //backgroundColor: \"cyan\",\n            },\n          ]}\n        >\n          <IconButton\n            icon={\"chevron-left\"}\n            style={{ width: 18, color: UIConstants.BLACK_TEXT_COLOR }}\n            onPress={() => {\n              dispatch(Actions.goToScreen({ screen: \"GROUPS\" }));\n            }}\n          />\n          {/* group name */}\n          <View\n            style={{\n              flexGrow: 1,\n              flexDirection: \"row\",\n              alignItems: \"flex-start\",\n              justifyContent: \"flex-start\",\n              //backgroundColor: \"cyan\",\n            }}\n          >\n            <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n              <View style={{ flexDirection: \"column\" }}>\n                <TouchableOpacity\n                  onPress={() => {\n                    setMembersModalVisible(true);\n                  }}\n                >\n                  <Text\n                    style={{\n                      fontWeight: \"bold\",\n                      fontSize: 20,\n                      color: UIConstants.BLACK_TEXT_COLOR,\n                    }}\n                  >\n                    {group.name}\n                  </Text>\n                  {Globals.dev ? <Text style={{ fontSize: 10 }}>{group.id}</Text> : null}\n                  {org != null && (\n                    <Text style={{ fontWeight: \"normal\", fontSize: 14 }}>{org.name}</Text>\n                  )}\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          {/* members button */}\n          <View\n            style={{\n              width: 80,\n              flexGrow: 0,\n              marginRight: 4,\n              alignItems: \"flex-end\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            {/*\n            <MyButtons.MenuButton\n              icon=\"account-supervisor\"\n              text={members.length + \" member\" + (members.length > 1 ? \"s\" : \"\")}\n              onPress={() => {\n                console.log(\"members pressed\");\n                setMembersModalVisible(true);\n              }}\n            />\n            */}\n            <TouchableOpacity\n              onPress={() => {\n                setMembersModalVisible(true);\n              }}\n            >\n              <FacePile\n                userIds={[userInfo.uid].concat(\n                  members\n                    .filter((groupMembership) => {\n                      return userInfo.uid != groupMembership.uid;\n                    })\n                    .map((groupMembership) => groupMembership.uid)\n                )}\n                border\n              />\n            </TouchableOpacity>\n          </View>\n        </View>\n        <Divider style={{}} width={1} color=\"lightgrey\" />\n      </View>\n      {/* messages section */}\n      <View\n        style={{\n          flexGrow: 1,\n          flexDirection: \"column\",\n          backgroundColor: \"white\",\n        }}\n      >\n        <View style={{ flex: 1 }}>\n          <View\n            style={{\n              flexDirection: \"column\",\n              flex: 1,\n              //backgroundColor: \"green\"\n            }}\n          >\n            <FlatList\n              style={{\n                flex: 1,\n                //backgroundColor: \"orange\"\n              }}\n              data={\n                //DATA\n                sortedMessages\n              }\n              renderItem={renderMessage}\n              keyExtractor={(item) => item.id}\n              ItemSeparatorComponent={FlatListItemSeparator}\n            />\n          </View>\n        </View>\n      </View>\n      <Divider style={{}} width={1} color=\"darkgrey\" />\n      {/* toolbar section */}\n      <View\n        style={{\n          //backgroundColor: \"purple\",\n          alignItems: \"flex-end\",\n          justifyContent: \"center\",\n          flexDirection: \"row\",\n          height: bottomBarHeight,\n        }}\n      >\n        <IconButton\n          icon=\"plus\"\n          onPress={() => {\n            setShowNewMessageModal(true);\n          }}\n        />\n        <IconButton\n          icon=\"calendar-plus\"\n          onPress={() => {\n            setShowNewEventModal(true);\n          }}\n        />\n      </View>\n      {/* messages modal */}\n      {messagesModalVisible != null && (\n        <MessageModal\n          groupId={groupId}\n          messageId={messagesModalVisible}\n          visible={messagesModalVisible != null}\n          closeModal={() => {\n            setMessagesModalVisible(null);\n          }}\n        />\n      )}\n      {/* MODALS */}\n      {/* group members modal */}\n      <GroupMembersModal\n        groupId={groupId}\n        visible={membersModalVisible}\n        closeModal={() => {\n          setMembersModalVisible(false);\n        }}\n      />\n      <ThreadMessageModal\n        userInfo={userInfo}\n        group={group}\n        visible={showNewMessageModal}\n        sendMessage={sendMessage}\n        showModal={(flag) => {\n          setShowNewMessageModal(flag);\n        }}\n      />\n      <NewEventModal\n        userInfo={userInfo}\n        group={group}\n        visible={showNewEventModal}\n        sendEvent={sendEventMessage}\n        showModal={(flag) => {\n          setShowNewEventModal(flag);\n        }}\n      />\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\", // row\n    alignItems: \"center\",\n  },\n});\n","import React, { useState } from \"react\";\nimport { ScrollView, Text, TouchableOpacity, View } from \"react-native\";\nimport { Avatar, Divider } from \"react-native-elements\";\nimport { IconButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport Portal from \"./Portal\";\nimport Toolbar from \"./Toolbar\";\nimport TopBar from \"./TopBar\";\nimport * as UIConstants from \"./UIConstants\";\nimport * as MyButtons from \"./MyButtons\";\nimport NewPrivateGroupModal from \"./NewPrivateGroupModal\";\nimport * as Controller from \"./Controller\";\nimport * as Globals from \"./Globals\";\nimport * as UserInfo from \"./UserInfo\";\nimport FacePile from \"./FacePile\";\nexport default function GroupsScreen({}) {\n  const dispatch = useDispatch();\n  // const x = null;\n  // const a = x.foo;\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const {\n    schoolList,\n    schoolMap,\n    groupList,\n    groupMap,\n    userGroupMemberships,\n    orgsMap,\n    groupMembershipMap,\n  } = useSelector((state) => {\n    return {\n      schoolList: state.main.schoolList,\n      schoolMap: state.main.schoolMap,\n      groupList: state.main.groupList,\n      groupMap: state.main.groupMap,\n      userGroupMemberships: state.main.userGroupMemberships,\n      groupMembershipMap: state.main.groupMembershipMap,\n      orgsMap: state.main.orgsMap,\n    };\n  });\n  const [visibleSchoolGroupModal, setVisibleSchoolGroupModal] = useState(null);\n  const [newPrivateGroupModalVisible, setNewPrivateGroupModalVisible] = useState(false);\n  const createPrivateGroup = async (groupName, inviteees, emailInvitees) => {\n    const groupId = await Controller.createPrivateGroupAndJoin(\n      dispatch,\n      userInfo,\n      groupName,\n      inviteees,\n      emailInvitees\n    );\n    dispatch(Actions.goToScreen({ screen: \"GROUP\", groupId: groupId }));\n  };\n\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n\n  /* search bar at the top */\n  /* search will surfae groups you don't belong to as well as groups you belong to */\n  /* search will also surface \"schools and organizations\"\n  /*\n    loop over schools -\n    if no groups and belong to the school\n    Have a scroll view for each school\n    with suggested adds\n    at the bottom of the scroll - have a create new group\n    (if no groups associated with the school, just have a create new group)\n    if you do belong to a group just list the group with no sroll\n\n    loop over activities - same as schools\n\n\n\n    if you don't belong to any schools just say - you don't have any groups and only the search is enabled.\n  */\n  //const userSchools = userInfo.profile.schools ?? [];\n  // const userGroupIds = userGroupMemberships.map(\n  //   (groupMembership) => groupMembership.groupId\n  // );\n  let groupsComponents = null;\n  if (userGroupMemberships.length > 0) {\n    groupsComponents = userGroupMemberships.map((userGroupMembership, index) => {\n      const groupId = userGroupMembership.groupId;\n      const group = groupMap[groupId];\n      if (group == null || group.status == \"deleted\") {\n        /*\n        if (Globals.dev) {\n          return (\n            <Text key={index}>\n              (null), groupId: {groupId}, group_membership_id:\n              {userGroupMembership.id}\n            </Text>\n          );\n        } else {\n          return null;\n        }\n        */\n        return null;\n      }\n      const org = orgsMap[group.orgId];\n      const members = groupMembershipMap[group.id];\n      return (\n        <View\n          key={index}\n          style={{\n            flex: 1,\n            //backgroundColor: \"cyan\"\n          }}\n        >\n          <TouchableOpacity\n            key={group.id}\n            style={{\n              flexDirection: \"row\",\n              height: 60,\n              alignItems: \"center\",\n              paddingLeft: 10,\n            }}\n            onPress={() => {\n              dispatch(Actions.goToScreen({ screen: \"GROUP\", groupId: group.id }));\n            }}\n          >\n            <View\n              style={{\n                flexGrow: 1,\n                flexDirection: \"column\",\n                //backgroundColor: \"green\",\n              }}\n            >\n              <Text\n                style={{\n                  justifyContent: \"center\",\n                  alignItems: \"flex-start\",\n                  fontSize: 18,\n                  fontWeight: \"bold\",\n                  color: UIConstants.BLACK_TEXT_COLOR,\n                  //fontFamily: \"Helvetica Neue\",\n                }}\n              >\n                {group.name} {/*group.id*/}\n              </Text>\n              {Globals.dev && (\n                <Text style={{ fontSize: 8 }}>\n                  user_group_membership: {userGroupMembership.id}\n                  group: {group.id}\n                </Text>\n              )}\n              {org != null && (\n                <Text\n                  style={{\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    fontSize: 14,\n                  }}\n                >\n                  {org.name ?? \"[No organization]\"}\n                </Text>\n              )}\n              <View style={{ flex: 1, paddingTop: 8 }}>\n                <FacePile\n                  userIds={[userInfo.uid].concat(\n                    members\n                      .filter((groupMembership) => {\n                        return userInfo.uid != groupMembership.uid;\n                      })\n                      .map((groupMembership) => groupMembership.uid)\n                  )}\n                  border\n                />\n              </View>\n            </View>\n            <View\n              style={{\n                flexBasis: 100,\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n              }}\n            >\n              <IconButton icon=\"chevron-right\" color={\"darkgrey\"} size={32} />\n              {/*\n              <MyButtons.FormButton\n                text=\"Open\"\n                onPress={() => {\n                  dispatch(\n                    Actions.goToScreen({ screen: \"GROUP\", groupId: group.id })\n                  );\n                }}\n              />\n              */}\n            </View>\n          </TouchableOpacity>\n          <Divider style={{ marginTop: 20, marginBottom: 10 }} width={3} color=\"lightgrey\" />\n        </View>\n      );\n    });\n  }\n\n  return (\n    <Portal backgroundColor={UIConstants.DEFAULT_BACKGROUND}>\n      <TopBar\n        key=\"topbar\"\n        style={{}}\n        left={\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            <Text\n              style={{\n                flexGrow: 1,\n                paddingLeft: 6,\n                fontWeight: \"bold\",\n                fontSize: 20,\n                color: UIConstants.BLACK_TEXT_COLOR,\n                //fontFamily: \"Helvetica Neue\",\n                //color: \"grey\",\n                //backgroundColor: \"yellow\",\n              }}\n            >\n              My Groups\n            </Text>\n            <View style={{ width: 80, alignItems: \"flex-end\" }}>\n              {UserInfo.avatarComponent(userInfo, () => {\n                dispatch(\n                  Actions.openModal({\n                    modal: \"MY_PROFILE\",\n                  })\n                );\n              })}\n            </View>\n          </View>\n        }\n        center={null}\n        right={null}\n      />\n      <View key=\"main_content\" style={{ flex: 1, backgroundColor: \"white\", paddingTop: 20 }}>\n        <ScrollView key=\"messages\">\n          {groupsComponents}\n          <View\n            style={{\n              flex: 1,\n              /*backgroundColor: \"cyan\",*/ height: 60,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <MyButtons.LinkButton\n              text=\"Start a new Group\"\n              onPress={async () => {\n                setNewPrivateGroupModalVisible(true);\n              }}\n            />\n          </View>\n        </ScrollView>\n        <Toolbar key=\"toolbar\" />\n      </View>\n      <NewPrivateGroupModal\n        key=\"new-group-modal\"\n        visible={newPrivateGroupModalVisible}\n        createGroup={createPrivateGroup}\n        closeModal={() => setNewPrivateGroupModalVisible(false)}\n      />\n    </Portal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Button, ScrollView, Text, View } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Controller from \"./Controller\";\nimport * as Paper from \"react-native-paper\";\nimport Portal from \"./Portal\";\nimport * as UIConstants from \"./UIConstants\";\nimport { CheckBox, Icon } from \"react-native-elements\";\n\nexport default function InitialChooseSchoolsWizard({ navigation }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { schoolList, schoolMap } = useSelector((state) => {\n    return {\n      schoolList: state.main.schoolList,\n      schoolMap: state.main.schoolMap,\n    };\n  });\n\n  const schoolListSorted = [...schoolList];\n  schoolListSorted.sort((s1, s2) => {\n    return s1.name.localeCompare(s2.name);\n  });\n\n  const [section, setSection] = useState(\"school\");\n  const [schoolSelection, setSchoolSelection] = useState({});\n\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n\n  const schoolSection = (\n    <View key=\"school_section\" style={{ flex: 1 }}>\n      <Text style={{ fontSize: 20 }}>Select Your School(s)</Text>\n      <ScrollView>\n        {schoolListSorted.map((school) => {\n          return (\n            <View\n              key={school.id}\n              style={{ alignItems: \"center\", flex: 1, flexDirection: \"row\" }}\n            >\n              {/*\n              <CheckBox\n                status={schoolSelection[school.id] ? \"checked\" : \"unchecked\"}\n                uncheckedColor=\"red\"\n                onPress={() => {\n                  const newSchoolSelection = { ...schoolSelection };\n                  newSchoolSelection[school.id] =\n                    newSchoolSelection[school.id] ?? false ? true : false;\n                  setSchoolSelection(newSchoolSelection);\n                }}\n              />\n              */}\n              <CheckBox\n                containerStyle={{\n                  backgroundColor: \"transparent\",\n                  borderColor: \"transparent\",\n                  padding: 0,\n                }}\n                title={<Text style={{ fontSize: 14 }}>{school.name}</Text>}\n                checked={schoolSelection[school.id] ?? false}\n                checkedIcon=\"dot-circle-o\"\n                uncheckedIcon=\"circle-o\"\n                onPress={() => {\n                  const newSchoolSelection = { ...schoolSelection };\n                  const checked = !(newSchoolSelection[school.id] ?? false);\n\n                  newSchoolSelection[school.id] = checked;\n                  console.log(\n                    \"setting school selection: \" +\n                      school.id +\n                      \": \" +\n                      checked +\n                      \",\" +\n                      JSON.stringify(newSchoolSelection)\n                  );\n                  setSchoolSelection(newSchoolSelection);\n                }}\n              />\n            </View>\n          );\n        })}\n      </ScrollView>\n      <Button\n        onPress={() => {\n          Controller.initialUserProfileSchools(\n            dispatch,\n            userInfo,\n            Object.keys(schoolSelection).filter((id) => schoolSelection[id])\n          );\n        }}\n        title=\"Done\"\n      />\n    </View>\n  );\n\n  return (\n    <Portal backgroundColor={UIConstants.DEFAULT_BACKGROUND}>\n      <View style={{ flex: 1 }}>{section == \"school\" && schoolSection}</View>\n    </Portal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, Text, View } from \"react-native\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport BottomBar from \"./BottomBar\";\nimport * as Controller from \"./Controller\";\nimport * as MyButtons from \"./MyButtons\";\nimport NewSchoolGroupModal from \"./NewSchoolGroupModal\";\nimport Portal from \"./Portal\";\nimport TopBar from \"./TopBar\";\nimport * as UIConstants from \"./UIConstants\";\n\nexport default function InitialJoinSchoolGroupsScreen() {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n\n  const { schoolList, schoolMap, groupList, groupMap, userGroupMemberships } =\n    useSelector((state) => {\n      return {\n        schoolList: state.main.schoolList,\n        schoolMap: state.main.schoolMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n      };\n    });\n\n  /* design */\n  /*\n    Have accordion selection with each item being a school\n    under that you can scroll all the groups in the school and hit join for each one\n    under everything is a done button in the footer\n  */\n  const [visibleSchoolGroupModal, setVisibleSchoolGroupModal] = useState(null);\n\n  const userSchools = userInfo.profile.schools ?? [];\n  const userGroupMembershipList = userGroupMemberships.map(\n    (groupMembership) => groupMembership.groupId\n  );\n\n  const schoolsComponents = userSchools.map((school_id, index) => {\n    const school = schoolMap[school_id];\n    const schoolGroups = groupList.filter(\n      (group) => group.schoolId == school.id\n    );\n\n    const joinGroupComponents = schoolGroups.map((group) => {\n      return (\n        <View\n          key={\"join_\" + school.id + \"_\" + group.id}\n          style={{\n            flexDirection: \"row\",\n            height: 60,\n            alignItems: \"center\",\n            paddingLeft: 10,\n          }}\n        >\n          <Text\n            style={{\n              flexGrow: 1,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {group.name}\n          </Text>\n          <View\n            style={{\n              flexBasis: 100,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {userGroupMembershipList.includes(group.id) && (\n              <Icon name={\"check\"} style={{ color: \"black\", fontSize: 16 }} />\n            )}\n            {!userGroupMembershipList.includes(group.id) && (\n              <MyButtons.FormButton\n                text=\"Join\"\n                onPress={() => {\n                  Controller.joinGroup(dispatch, userInfo, group.id);\n                }}\n              />\n            )}\n          </View>\n        </View>\n      );\n    });\n    joinGroupComponents.push(\n      <View key=\"new\">\n        <MyButtons.FormButton\n          text=\"Create New Group\"\n          onPress={() => {\n            setVisibleSchoolGroupModal(school.id);\n          }}\n        />\n      </View>\n    );\n\n    const createSchoolGroup = async function (groupName, grade, year) {\n      return Controller.createSchoolGroupAndJoin(\n        dispatch,\n        userInfo,\n        school.id,\n        groupName,\n        grade,\n        year\n      );\n    };\n    return (\n      <View key={\"school_\" + school.id} style={{ flex: 1 }}>\n        <View\n          style={{\n            paddingTop: 10,\n            paddingBottom: 10,\n            paddingLeft: 10,\n            backgroundColor: \"darkgrey\",\n            width: \"100%\",\n          }}\n        >\n          <Text style={{ fontSize: 20 }}>{school.name}</Text>\n        </View>\n        <ScrollView key=\"scroll_join\">{joinGroupComponents}</ScrollView>\n        <NewSchoolGroupModal\n          key=\"newgroupmodal\"\n          visible={visibleSchoolGroupModal == school.id}\n          onCreateGroup={createSchoolGroup}\n          closeModal={() => {\n            console.log(\"close modal called\");\n            setVisibleSchoolGroupModal(null);\n          }}\n        />\n      </View>\n    );\n  });\n\n  return (\n    <Portal backgroundColor={UIConstants.DEFAULT_BACKGROUND}>\n      <TopBar\n        key=\"topbar\"\n        style={{ backgroundColor: UIConstants.DEFAULT_BACKGROUND }}\n        left={null}\n        center={<Text>Join School Groups</Text>}\n        right={\n          <MyButtons.MenuButton\n            icon=\"arrow-right\"\n            text=\"Done\"\n            onPress={() => {\n              dispatch(Actions.goToScreen({ screen: \"GROUPS\" }));\n            }}\n          />\n        }\n      />\n      <View key=\"bottombar\" style={{ flex: 1 }}>\n        {schoolsComponents}\n        <BottomBar style={{ backgroundColor: UIConstants.DEFAULT_BACKGROUND }}>\n          <MyButtons.FormButton\n            key=\"school_orgs\"\n            text=\"Schools/Orgs\"\n            onPress={() => {}}\n          />\n          <MyButtons.FormButton\n            key=\"profile\"\n            text=\"My Profile\"\n            onPress={() => {}}\n          />\n          <MyButtons.FormButton\n            key=\"logout\"\n            text=\"Logout\"\n            onPress={() => {\n              Controller.logout();\n            }}\n          />\n          <MyButtons.FormButton\n            key=\"debug\"\n            text=\"Debug\"\n            onPress={() => {\n              dispatch(\n                Actions.goToUserScreen({\n                  screen: \"DEBUG\",\n                  backAction: () =>\n                    Actions.goToUserScreen({ screen: \"GROUPS\" }),\n                })\n              );\n            }}\n          />\n        </BottomBar>\n      </View>\n    </Portal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet, Text, View, Button, TextInput, ActivityIndicator } from \"react-native\";\nimport {\n  GoogleAuthProvider,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  FacebookAuthProvider,\n  getAuth,\n} from \"firebase/auth\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"./config/firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport * as MyButtons from \"./MyButtons\";\nimport { initializeApp } from \"firebase/app\";\nimport * as Globals from \"./Globals\";\n\nexport default function Login({ afterLoginScreen }) {\n  const dispatch = useDispatch();\n\n  const [user, loading, error] = useAuthState(auth);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const onHandleLogin = () => {\n    if (email !== \"\" && password !== \"\") {\n      signInWithEmailAndPassword(auth, email, password)\n        .then((userCredential) => {\n          console.log(\"got user credential: \" + JSON.stringify(userCredential));\n          dispatch(Actions.goToScreen(afterLoginScreen));\n        })\n        .catch((err) => {\n          console.log(`Login err: ${err}`);\n        });\n    }\n  };\n\n  /*\n  async function loginWithFacebook() {\n    let type = null;\n    let token = null;\n    try {\n      await Facebook.initializeAsync({\n        appId: \"7185965598112053\",\n      });\n\n      const { type, token } = await Facebook.logInWithReadPermissionsAsync(\n        \"7185965598112053\",\n        { permissions: [\"public_profile\"] }\n      );\n\n      alert(\"type: \" + type + \", \" + token);\n    } catch (error) {\n      alert(\"error: \" + error);\n    }\n    if (type == \"success\") {\n      const credential = firebase.auth.FacebookAuthProvider.credential(token);\n      firebase\n        .auth()\n        .signInWithCredential(credential)\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n  */\n\n  if (loading || user) {\n    return (\n      <View\n        style={[\n          StyleSheet.absoluteFill,\n          {\n            backgroundColor: \"rgba(0,0,0,0.4)\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          },\n        ]}\n      >\n        <ActivityIndicator color=\"#fff\" animating size=\"large\" />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Log In</Text>\n      {/*\n      <Button\n        style={{ paddingBottom: 10 }}\n        onPress={async () => {\n          /*\n          const firebaseConfig = {\n            apiKey: \"AIzaSyD7sAZY_oPEoAhPLbLST23DAAmAPiOh8V8\",\n            authDomain: \"parents-749dd.firebaseapp.com\",\n            databaseURL: \"https://parents-749dd-default-rtdb.firebaseio.com\",\n            projectId: \"parents-749dd\",\n            storageBucket: \"parents-749dd.appspot.com\",\n            messagingSenderId: \"202897799240\",\n            appId: \"1:202897799240:web:6e7181665de58029cfc07d\",\n            measurementId: \"G-RJ6EY4S9LJ\",\n          };\n          var firebase = require(\"firebase\");\n          firebase.initializeApp(firebaseConfig);\n          const auth = firebase.auth();\n          // initialize firebase\n          //const app = initializeApp(firebaseConfig);\n          //const auth = getAuth(app);\n\n          const provider = new FacebookAuthProvider();\n          const result = await auth.signInWithPopup(provider);\n          const user = result.user;\n          // This gives you a Facebook Access Token.\n          const credential = provider.credentialFromResult(auth, result);\n          const token = credential.accessToken;\n          console.log(\"done\");\n          /*\n          signInWithRedirect(auth, provider);\n\n          signInWithPopup(auth, provider)\n            .then((result) => {\n              alert(\"facebook then\");\n              // The signed-in user info.\n              const user = result.user;\n\n              // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n              const credential =\n                FacebookAuthProvider.credentialFromResult(result);\n              const accessToken = credential.accessToken;\n\n              // ...\n            })\n            .catch((error) => {\n              alert(\"facebook catch\");\n              // Handle Errors here.\n              const errorCode = error.code;\n              const errorMessage = error.message;\n              // The email of the user's account used.\n              const email = error.email;\n              // The AuthCredential type that was used.\n              const credential =\n                FacebookAuthProvider.credentialFromError(error);\n\n              // ...\n            });\n\n      } color=\"#f57c00\" title=\"Log in using Facebook\" /> */}\n      {/*\n      <Button\n        style={{ paddingBottom: 10 }}\n        onPress={() => {\n          const provider = new GoogleAuthProvider();\n          provider.addScope(\n            \"https://www.googleapis.com/auth/contacts.readonly\"\n          );\n          const auth = getAuth();\n          signInWithPopup(auth, provider)\n            .then((result) => {\n              console.log(\"google auth result: \" + JSON.stringify(result));\n              // This gives you a Google Access Token. You can use it to access the Google API.\n              const credential =\n                GoogleAuthProvider.credentialFromResult(result);\n              const token = credential.accessToken;\n              // The signed-in user info.\n              const user = result.user;\n              // ...\n            })\n            .catch((error) => {\n              console.log(\"google auth error: \" + JSON.stringify(error));\n              // Handle Errors here.\n              const errorCode = error.code;\n              const errorMessage = error.message;\n              // The email of the user's account used.\n              const email = error.email;\n              // The AuthCredential type that was used.\n              const credential = GoogleAuthProvider.credentialFromError(error);\n              // ...\n            });\n        }}\n        color=\"#f57c00\"\n        title=\"Log in using Google\"\n      />\n      */}\n      <TextInput\n        style={styles.input}\n        placeholder=\"Enter email\"\n        autoCapitalize=\"none\"\n        keyboardType=\"email-address\"\n        textContentType=\"emailAddress\"\n        autoFocus={true}\n        value={email}\n        onChangeText={(text) => setEmail(text)}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Enter password\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        secureTextEntry={true}\n        textContentType=\"password\"\n        value={password}\n        onChangeText={(text) => setPassword(text)}\n      />\n      <Button onPress={onHandleLogin} color=\"#f57c00\" title=\"Login\" />\n      {/*\n      <Button\n        onPress={async () => {\n          loginWithFacebook();\n        }}\n        color=\"#f57c00\"\n        title=\"Login With Facebook\"\n      />\n      */}\n      <MyButtons.LinkButton\n        text=\"Create an Account\"\n        onPress={async () => {\n          dispatch(Actions.goToScreen({ screen: \"SIGNUP\" }));\n        }}\n      />\n      {/*\n      <LoginButton />\n      */}\n      {Globals.dev && (\n        <View style={{ flexDirection: \"column\" }}>\n          <MyButtons.LinkButton\n            text=\"ilyaskuratovsky@gmail.com\"\n            onPress={async () => {\n              setEmail(\"ilyaskuratovsky@gmail.com\");\n              setPassword(\"ilyaskuratovsky\");\n            }}\n          />\n          <MyButtons.LinkButton\n            text=\"ingaskur@gmail.com\"\n            onPress={async () => {\n              setEmail(\"ingaskur@gmail.com\");\n              setPassword(\"ingaskur\");\n            }}\n          />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    paddingTop: 50,\n    paddingHorizontal: 12,\n  },\n\n  title: {\n    fontSize: 24,\n    fontWeight: \"600\",\n    color: \"#444\",\n    alignSelf: \"center\",\n    paddingBottom: 24,\n  },\n  input: {\n    backgroundColor: \"#fff\",\n    marginBottom: 20,\n    fontSize: 16,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n  },\n});\n","import React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { groupMemberships } from \"./Actions\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as Controller from \"./Controller\";\nimport * as Globals from \"./Globals\";\n\nexport default function Messages(props) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { toUserInvites, groupMap } = useSelector((state) => {\n    return {\n      toUserInvites: state.main.toUserInvites,\n      groupMap: state.main.groupMap,\n    };\n  });\n\n  const insets = useSafeAreaInsets();\n\n  if (toUserInvites != null) {\n    return (\n      <View\n        style={{\n          backgroundColor: \"red\",\n          position: \"absolute\",\n          bottom: insets.bottom,\n          width: \"100%\",\n        }}\n      >\n        {toUserInvites.map((invite) => {\n          const group = groupMap[invite.groupId];\n          return (\n            <View\n              key={\"join_\" + group.id}\n              style={{\n                flexDirection: \"row\",\n                height: 60,\n                alignItems: \"center\",\n                paddingLeft: 10,\n              }}\n            >\n              <Text\n                style={{\n                  flexGrow: 1,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                Invite to {group.name}\n              </Text>\n              <View\n                style={{\n                  flexBasis: 200,\n                  flexDirection: \"row\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <MyButtons.FormButton\n                  text=\"Join\"\n                  onPress={async () => {\n                    await Controller.joinGroupFromInvite(dispatch, userInfo, group.id, invite.id);\n                  }}\n                />\n                <MyButtons.FormButton\n                  text=\"Dismiss\"\n                  onPress={async () => {\n                    await Controller.dismissInvite(dispatch, userInfo, invite.id);\n                  }}\n                />\n              </View>\n              <View>\n                <Text style={{ fontSize: 10 }}>{Globals.dev ? \"(\" + invite.id + \")\" : \"\"}</Text>\n              </View>\n            </View>\n          );\n        })}\n      </View>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useState } from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { IconButton } from \"react-native-paper\";\nimport { Image } from \"react-native-expo-image-cache\";\n\nimport {\n  Text,\n  TouchableOpacity,\n  View,\n  Modal,\n  TextInput,\n  Button,\n  StyleSheet,\n  ActivityIndicator,\n} from \"react-native\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { groupMemberships, userInfo } from \"./Actions\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as Controller from \"./Controller\";\nimport * as Globals from \"./Globals\";\nimport Portal from \"./Portal\";\nimport * as Actions from \"./Actions\";\nimport TopBarMiddleContentSideButtons from \"./TopBarMiddleContentSideButtons\";\nimport uuid from \"uuid\";\n\nimport { getStorage, ref, uploadBytes, getDownloadURL, uploadString } from \"firebase/storage\";\nimport { storage } from \"./config/firebase\";\n\nexport default function MyProfileModal({ visible }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const insets = useSafeAreaInsets();\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      {visible && <ModalContainer userInfo={userInfo} />}\n    </Modal>\n  );\n}\n\nfunction ModalContainer({ userInfo }) {\n  const dispatch = useDispatch();\n  const [firstName, setFirstName] = useState(userInfo.firstName);\n  const [lastName, setLastName] = useState(userInfo.lastName);\n  const [editingImage, setEditingImage] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const [image, setImage] = useState(userInfo.image);\n\n  const _maybeRenderUploadingOverlay = () => {\n    if (uploading) {\n      return (\n        <View\n          style={[\n            StyleSheet.absoluteFill,\n            {\n              backgroundColor: \"rgba(0,0,0,0.4)\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            },\n          ]}\n        >\n          <ActivityIndicator color=\"#fff\" animating size=\"large\" />\n        </View>\n      );\n    }\n  };\n\n  const _handleImagePicked = async (pickerResult) => {\n    try {\n      setUploading(true);\n\n      if (!pickerResult.cancelled) {\n        const uploadUrl = await uploadImageAsync(pickerResult.uri);\n        setImage(uploadUrl);\n      }\n    } catch (e) {\n      console.log(e);\n      alert(\"Upload failed, sorry :(\");\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const _pickImage = async () => {\n    let pickerResult = await ImagePicker.launchImageLibraryAsync({\n      allowsEditing: true,\n      aspect: [4, 3],\n    });\n\n    console.log({ pickerResult });\n\n    _handleImagePicked(pickerResult);\n  };\n\n  const _takePhoto = async () => {\n    let pickerResult = await ImagePicker.launchCameraAsync({\n      allowsEditing: true,\n      aspect: [4, 3],\n    });\n\n    _handleImagePicked(pickerResult);\n  };\n\n  return (\n    <Portal>\n      <TopBarMiddleContentSideButtons\n        style={{}}\n        left={\n          <MyButtons.LinkButton\n            text=\"Cancel\"\n            onPress={async () => {\n              dispatch(\n                Actions.closeModal({\n                  modal: \"MY_PROFILE\",\n                })\n              );\n            }}\n          />\n        }\n        center={<Text style={{ fontWeight: \"bold\", fontSize: 16 }}>My Profile</Text>}\n        right={\n          <MyButtons.LinkButton\n            text=\"Done\"\n            onPress={async () => {\n              await Controller.saveProfile(userInfo.uid, firstName, lastName, image);\n              dispatch(\n                Actions.closeModal({\n                  modal: \"MY_PROFILE\",\n                })\n              );\n            }}\n          />\n        }\n      />\n      {Globals.dev && <Text style={{ fontSize: 10 }}>{userInfo.uid}</Text>}\n      <View\n        style={{\n          paddingTop: 20,\n          paddingLeft: 10,\n          paddingRight: 10,\n          flexDirection: \"column\",\n          height: 140,\n          //backgroundColor: \"cyan\",\n        }}\n      >\n        <TextInput\n          key=\"first_name_input\"\n          style={{\n            borderWidth: 1,\n            paddingLeft: 10,\n            height: 40,\n            marginBottom: 20,\n            fontSize: 16,\n          }}\n          onChangeText={(value) => {\n            setFirstName(value);\n          }}\n          placeholder={\"First Name\"}\n          value={firstName ?? \"\"}\n          selectTextOnFocus={true}\n        />\n        <TextInput\n          key=\"last_name_input\"\n          style={{\n            borderWidth: 1,\n            paddingLeft: 10,\n            height: 40,\n            fontSize: 16,\n          }}\n          onChangeText={(value) => {\n            setLastName(value);\n          }}\n          placeholder={\"Last Name\"}\n          value={lastName ?? \"\"}\n          selectTextOnFocus={true}\n        />\n        <Text style={{ marginTop: 20 }}>Profile Picture</Text>\n        <View style={{ marginTop: 10, flexDirection: \"row\", alignItems: \"center\" }}>\n          {image == null && (\n            <Text style={{ width: 80, height: 80, borderRadius: 400 / 2 }}>No Profile Image</Text>\n          )}\n          {image != null && (\n            <Image style={{ height: 80, width: 80, borderRadius: 40 }} uri={image} />\n          )}\n          {/*\n          <IconButton\n            icon=\"pencil\"\n            color={\"blue\"}\n            size={38}\n            onPress={() => {\n              setEditingImage(!editingImage);\n            }}\n          />\n          */}\n          {editingImage && (\n            <>\n              <Button onPress={_pickImage} title=\"Pick Image\" />\n              <Button onPress={_takePhoto} title=\"Take Photo\" />\n            </>\n          )}\n        </View>\n        <View style={{ height: 100, justifyContent: \"center\", alignItems: \"center\" }}>\n          <MyButtons.LinkButton\n            text=\"Log Out\"\n            onPress={async () => {\n              await Controller.logout(dispatch);\n              dispatch(\n                Actions.closeModal({\n                  modal: \"MY_PROFILE\",\n                })\n              );\n            }}\n          />\n        </View>\n      </View>\n      {_maybeRenderUploadingOverlay()}\n    </Portal>\n  );\n}\n\nasync function uploadImageAsync(uri) {\n  // Why are we using XMLHttpRequest? See:\n  // https://github.com/expo/expo/issues/2402#issuecomment-443726662\n  const blob = await new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError(\"Network request failed\"));\n    };\n    xhr.responseType = \"blob\";\n    xhr.open(\"GET\", uri, true);\n    xhr.send(null);\n  });\n  console.log(\"blob:\" + JSON.stringify(blob));\n\n  //const fileRef = ref(getStorage(), uuid.v4());\n  const fileRef = ref(storage, \"images/profile/\" + userInfo.uid + \"_\" + uuid.v4() + \".jpg\");\n  console.log(\"uploading\");\n  const result = await uploadBytes(fileRef, blob);\n  // We're done with the blob, close and release it\n  blob.close();\n\n  /*\n  const string1 = \"5b6p5Y+344GX44G+44GX44Gf77yB44GK44KB44Gn44Go44GG77yB\";\n  try {\n    uploadString(fileRef, string1)\n      .then((response) => {\n        console.log(\"response; \" + JSON.stringify(response));\n      })\n      .catch((error) => {\n        console.log(\"error caught in promise: \" + JSON.stringify(error));\n      });\n  } catch (e) {\n    console.log(\"error caugh: \" + JSON.stringify(e));\n  }\n  */\n  return await getDownloadURL(fileRef);\n}\n","import React, { useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Avatar, Divider } from \"react-native-elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Portal from \"./Portal\";\nimport Toolbar from \"./Toolbar\";\nimport * as UIConstants from \"./UIConstants\";\nimport * as UserInfo from \"./UserInfo\";\nimport * as MyButtons from \"./MyButtons\";\nimport * as Controller from \"./Controller\";\n\nexport default function MyProfileScreen({}) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { schoolList, schoolMap, groupList, groupMap, userGroupMemberships, orgsMap } = useSelector(\n    (state) => {\n      return {\n        schoolList: state.main.schoolList,\n        schoolMap: state.main.schoolMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n        orgsMap: state.main.orgsMap,\n      };\n    }\n  );\n  const [visibleSchoolGroupModal, setVisibleSchoolGroupModal] = useState(null);\n\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n\n  const mySchools = (userInfo.profile ?? {}).schools ?? [];\n  console.log(\"userInfo: \" + JSON.stringify(userInfo));\n  console.log(\"mySchools: \" + JSON.stringify(mySchools));\n  const mySchoolComponents = mySchools.map((schoolId) => {\n    const school = orgsMap[schoolId];\n    console.log(\"school: \" + JSON.stringify(school));\n    return (\n      <View style={{ flex: 1, paddingLeft: 10 }}>\n        <Text style={{ fontSize: 20 }}>{school.name}</Text>\n      </View>\n    );\n  });\n\n  return (\n    <Portal backgroundColor={\"transparent\"}>\n      <View style={{ flex: 1, paddingTop: 20 }}>\n        {/* User Avatar section */}\n        <View\n          style={{\n            justifyContent: \"flex-start\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            paddingBottom: 5,\n            backgroundColor: \"white\",\n            height: 80,\n          }}\n        >\n          <Avatar\n            size={60}\n            rounded\n            title={UserInfo.chatDisplayName(userInfo).charAt(0).toUpperCase()}\n            containerStyle={{\n              backgroundColor: UserInfo.avatarColor(userInfo),\n              marginRight: 1,\n            }}\n          />\n          <View\n            style={{\n              flex: 1,\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              paddingRight: 20,\n            }}\n          >\n            <View style={{ flexDirection: \"column\" }}>\n              <Text\n                style={{\n                  marginLeft: 5,\n                  fontWeight: \"bold\",\n                  fontSize: 16,\n                }}\n              >\n                {UserInfo.chatDisplayName(userInfo)} {/**/ userInfo.uid /**/}\n              </Text>\n              <Text\n                style={{\n                  marginLeft: 5,\n                  fontWeight: \"normal\",\n                  fontSize: 12,\n                }}\n              >\n                {userInfo.email}\n              </Text>\n            </View>\n            <MyButtons.LinkButton\n              text=\"Log Out\"\n              onPress={async () => {\n                await Controller.logout(dispatch);\n              }}\n            />\n          </View>\n        </View>\n        {/* Main grow view */}\n        <View\n          style={{\n            flexGrow: 1,\n            justifyContent: \"flex-start\",\n            flexDirection: \"column\",\n          }}\n        >\n          {/* Schools */}\n          <View\n            style={{\n              height: 40,\n              paddingLeft: 10,\n              paddingRight: 10,\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              alignItems: \"flex-end\",\n            }}\n          >\n            <Text style={{ fontSize: 20, fontWeight: \"bold\" }}>My Schools</Text>\n            <MyButtons.FormButton text=\"Manage\" onPress={async () => {}} />\n          </View>\n          <Divider\n            style={{ marginTop: 10, marginBottom: 15, zIndex: 999999 }}\n            width={1}\n            color=\"darkgrey\"\n          />\n          {mySchoolComponents}\n        </View>\n        <Toolbar />\n      </View>\n    </Portal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Text, View, TextInput } from \"react-native\";\nimport { ToggleButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Paper from \"react-native-paper\";\nimport * as MyButtons from \"./MyButtons\";\n\nexport default function NewOrgGroupModal({\n  orgId,\n  visible,\n  onCreateGroup,\n  closeModal,\n}) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { orgsList, orgsMap, groupList, groupMap, userGroupMemberships } =\n    useSelector((state) => {\n      return {\n        orgsList: state.main.orgsList,\n        orgsMap: state.main.orgsMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n      };\n    });\n  const [groupName, setGroupName] = useState(null);\n  const [processing, setProcessing] = useState(false);\n\n  if (userInfo == null) {\n    return <Text>Loading Data...</Text>;\n  }\n  if (processing) {\n    return (\n      <Modal visible={true}>\n        <Text>Creating group...</Text>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal visible={visible} animationType={\"slide\"}>\n      <Text key=\"group_name_label\">Group Name</Text>\n      <TextInput\n        key=\"group_name_input\"\n        style={{ borderWidth: 1, width: \"100%\", fontSize: 16 }}\n        onChangeText={(value) => {\n          setGroupName(value);\n        }}\n        value={groupName ?? \"\"}\n        selectTextOnFocus={true}\n      />\n      <MyButtons.FormButton\n        key=\"create_button\"\n        text=\"Create\"\n        onPress={() => {\n          setProcessing(true);\n          onCreateGroup(groupName).then(() => {\n            setProcessing(false);\n            closeModal();\n          });\n        }}\n      />\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, Text, View, TouchableOpacity } from \"react-native\";\nimport { SearchBar } from \"react-native-elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport * as Controller from \"./Controller\";\nimport * as MyButtons from \"./MyButtons\";\nimport Portal from \"./Portal\";\nimport * as UIConstants from \"./UIConstants\";\nimport TopBar from \"./TopBar\";\nimport BottomBar from \"./BottomBar\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport NewOrgGroupModal from \"./NewOrgGroupModal\";\n\nexport default function OrgScreen({ orgId }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { orgsList, orgsMap, groupList, groupMap, userGroupMemberships } =\n    useSelector((state) => {\n      return {\n        orgsList: state.main.orgsList,\n        orgsMap: state.main.orgsMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n      };\n    });\n\n  const org = orgsMap[orgId];\n  const orgGroups = groupList.filter((group) => {\n    return group.orgId == orgId;\n  });\n  const userGroupMembershipList = userGroupMemberships.map(\n    (groupMembership) => groupMembership.groupId\n  );\n  const [visibleOrgGroupModal, setVisibleOrgGroupModal] = useState(null);\n\n  const createOrgGroup = async function (groupName) {\n    return Controller.createOrgGroupAndJoin(\n      dispatch,\n      userInfo,\n      org.id,\n      groupName\n    );\n  };\n\n  /* search bar at the top */\n  /* School Screen - \n- lists details about the school on top\n- below has all of the groups in a list (with join button)\n- At the bottom have: Don't see your group? Create a new one\n */\n\n  return (\n    <Portal backgroundColor={UIConstants.DEFAULT_BACKGROUND}>\n      <TopBar\n        style={{ backgroundColor: UIConstants.DEFAULT_BACKGROUND }}\n        left={null}\n        center={<Text>{org.name}</Text>}\n        right={null}\n      />\n\n      <View\n        style={{\n          flex: 1,\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        {orgGroups.map((group) => {\n          return (\n            <View\n              key={\"join_\" + org.id + \"_\" + group.id}\n              style={{\n                width: \"100%\",\n                flexDirection: \"row\",\n                height: 60,\n                alignItems: \"center\",\n                paddingLeft: 10,\n              }}\n            >\n              <Text\n                style={{\n                  flexGrow: 1,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                {group.name}\n              </Text>\n              <View\n                style={{\n                  flexBasis: 100,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                {userGroupMembershipList.includes(group.id) && (\n                  <MyButtons.FormButton\n                    text=\"Open\"\n                    onPress={() => {\n                      dispatch(\n                        Actions.goToScreen({\n                          screen: \"GROUP\",\n                          groupId: group.id,\n                        })\n                      );\n                    }}\n                  />\n                )}\n                {!userGroupMembershipList.includes(group.id) && (\n                  <MyButtons.FormButton\n                    text=\"Join\"\n                    onPress={() => {\n                      Controller.joinGroup(dispatch, userInfo, group.id);\n                    }}\n                  />\n                )}\n              </View>\n            </View>\n          );\n        })}\n      </View>\n      <View\n        key={\"org_\" + org.id}\n        style={{\n          height: 50,\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"flex-start\",\n        }}\n      >\n        <Text>Don't see your group?</Text>\n        <TouchableOpacity\n          onPress={() => {\n            setVisibleOrgGroupModal(true);\n          }}\n        >\n          <Text\n            style={{\n              fontSize: 12,\n              textDecorationLine: \"underline\",\n              color: \"blue\",\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Create a new one\n          </Text>\n        </TouchableOpacity>\n        <NewOrgGroupModal\n          key=\"newgroupmodal\"\n          visible={visibleOrgGroupModal}\n          onCreateGroup={createOrgGroup}\n          closeModal={() => {\n            console.log(\"close modal called\");\n            setVisibleOrgGroupModal(false);\n          }}\n        />\n      </View>\n      <BottomBar style={{ backgroundColor: UIConstants.DEFAULT_BACKGROUND }}>\n        <MyButtons.FormButton\n          text=\"Groups\"\n          onPress={() => {\n            dispatch(\n              Actions.goToUserScreen({\n                screen: \"DEBUG\",\n                backAction: () =>\n                  Actions.goToUserScreen({ screen: \"FIND_GROUPS\" }),\n              })\n            );\n          }}\n        />\n        <MyButtons.FormButton text=\"My Profile\" onPress={() => {}} />\n        <MyButtons.FormButton\n          text=\"Logout\"\n          onPress={() => {\n            Controller.logout();\n          }}\n        />\n        <MyButtons.FormButton\n          text=\"Debug\"\n          onPress={() => {\n            dispatch(\n              Actions.goToScreen({\n                screen: \"DEBUG\",\n                backAction: () => Actions.goToScreen({ screen: \"GROUPS\" }),\n              })\n            );\n          }}\n        />\n      </BottomBar>\n    </Portal>\n  );\n}\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\n\nexport default function PostScreen({ messageId }) {\n  return (\n    <View style={{ flexDirection: \"column\", flex: 1 }}>\n      <Text>sub thread: {messageId}</Text>\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, Text, View, TouchableOpacity } from \"react-native\";\nimport { SearchBar } from \"react-native-elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport * as Controller from \"./Controller\";\nimport * as MyButtons from \"./MyButtons\";\nimport NewSchoolGroupModal from \"./NewSchoolGroupModal\";\nimport Portal from \"./Portal\";\nimport * as UIConstants from \"./UIConstants\";\nimport TopBar from \"./TopBar\";\nimport BottomBar from \"./BottomBar\";\nimport Toolbar from \"./Toolbar\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\n\nexport default function SchoolScreen({ schoolId }) {\n  const dispatch = useDispatch();\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const { orgsList, orgsMap, groupList, groupMap, userGroupMemberships } =\n    useSelector((state) => {\n      return {\n        orgsList: state.main.orgsList,\n        orgsMap: state.main.orgsMap,\n        groupList: state.main.groupList,\n        groupMap: state.main.groupMap,\n        userGroupMemberships: state.main.userGroupMemberships,\n      };\n    });\n\n  const school = orgsMap[schoolId];\n  const schoolGroups = groupList.filter((group) => {\n    return group.orgId == schoolId;\n  });\n  const userGroupMembershipList = userGroupMemberships.map(\n    (groupMembership) => groupMembership.groupId\n  );\n  const [visibleSchoolGroupModal, setVisibleSchoolGroupModal] = useState(null);\n\n  const createSchoolGroup = async function (groupName, grade, year) {\n    return Controller.createSchoolGroupAndJoin(\n      dispatch,\n      userInfo,\n      school.id,\n      groupName,\n      grade,\n      year\n    );\n  };\n\n  /* search bar at the top */\n  /* School Screen - \n- lists details about the school on top\n- below has all of the groups in a list (with join button)\n- At the bottom have: Don't see your group? Create a new one\n */\n\n  return (\n    <Portal backgroundColor={UIConstants.DEFAULT_BACKGROUND}>\n      <TopBar\n        style={{ backgroundColor: UIConstants.DEFAULT_BACKGROUND }}\n        left={null}\n        center={<Text>{school.name}</Text>}\n        right={null}\n      />\n\n      <ScrollView\n        style={{\n          flex: 1,\n          flexDirection: \"column\",\n        }}\n      >\n        {schoolGroups.map((group) => {\n          return (\n            <View\n              key={\"join_\" + school.id + \"_\" + group.id}\n              style={{\n                width: \"100%\",\n                flexDirection: \"row\",\n                height: 60,\n                alignItems: \"center\",\n                paddingLeft: 10,\n              }}\n            >\n              <Text\n                style={{\n                  flexGrow: 1,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                {group.name}\n              </Text>\n              <View\n                style={{\n                  flexBasis: 100,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                {userGroupMembershipList.includes(group.id) && (\n                  <MyButtons.FormButton\n                    text=\"Open\"\n                    onPress={() => {\n                      dispatch(\n                        Actions.goToScreen({\n                          screen: \"GROUP\",\n                          groupId: group.id,\n                        })\n                      );\n                    }}\n                  />\n                )}\n                {!userGroupMembershipList.includes(group.id) && (\n                  <MyButtons.FormButton\n                    text=\"Join\"\n                    onPress={() => {\n                      Controller.joinGroup(dispatch, userInfo, group.id);\n                    }}\n                  />\n                )}\n              </View>\n            </View>\n          );\n        })}\n      </ScrollView>\n      <View\n        key={\"school_\" + school.id}\n        style={{\n          height: 50,\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"flex-start\",\n        }}\n      >\n        <Text>Don't see your group?</Text>\n        <TouchableOpacity\n          onPress={() => {\n            setVisibleSchoolGroupModal(school.id);\n          }}\n        >\n          <Text\n            style={{\n              fontSize: 12,\n              textDecorationLine: \"underline\",\n              color: \"blue\",\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Create a new one\n          </Text>\n        </TouchableOpacity>\n        <NewSchoolGroupModal\n          key=\"newgroupmodal\"\n          visible={visibleSchoolGroupModal == school.id}\n          onCreateGroup={createSchoolGroup}\n          closeModal={() => {\n            console.log(\"close modal called\");\n            setVisibleSchoolGroupModal(null);\n          }}\n        />\n      </View>\n      <Toolbar />\n    </Portal>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { StyleSheet, Text, View, Button, TextInput } from \"react-native\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"./config/firebase\";\nimport * as Actions from \"./Actions\";\nimport * as MyButtons from \"./MyButtons\"\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\n\nexport default function Signup() {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  /*\n  const onHandleSignup = () => {\n    if (email !== \"\" && password !== \"\") {\n      createUserWithEmailAndPassword(auth, email, password)\n        .then(() => {\n          console.log(\"signed up\");\n        })\n        .catch((err) => console.log(`Login err: ${err}`));\n    }\n  };\n  */\n  const onHandleSignup = () => {\n    setError(null);\n    if (password != confirmPassword) {\n      setError(\"Passwords do not match\");\n    } else if (email !== \"\" && password !== \"\") {\n      createUserWithEmailAndPassword(auth, email, password)\n        .then(() => {\n          signInWithEmailAndPassword(auth, email, password)\n            .then((userCredential) => {\n              console.log(\"got user credential: \" + JSON.stringify(userCredential));\n              dispatch(Actions.goToScreen({ screen: \"GROUPS\" }));\n            })\n            .catch((err) => {\n              setError(err.message);\n              console.log(`Login err: ${err}`);\n            });\n        })\n        .catch((err) => {\n          setError(err.message);\n        });\n    } else {\n      setError(\"Please enter all information\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign Up</Text>\n      {error != null && <Text style={styles.error}>{error}</Text>}\n      <TextInput\n        style={styles.input}\n        placeholder=\"Enter email\"\n        autoCapitalize=\"none\"\n        keyboardType=\"email-address\"\n        textContentType=\"emailAddress\"\n        value={email}\n        onChangeText={(text) => setEmail(text)}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Enter password\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        secureTextEntry={true}\n        textContentType=\"password\"\n        value={password}\n        onChangeText={(text) => setPassword(text)}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Confirm password\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        secureTextEntry={true}\n        textContentType=\"password\"\n        value={confirmPassword}\n        onChangeText={(text) => {\n          setConfirmPassword(text);\n        }}\n      />\n  <Button onPress={onHandleSignup} color=\"#f57c00\" title=\"Signup\" />\n      {/*\n      <Button\n        onPress={() => {\n          dispatch(Actions.goToScreen({ screen: \"LOGIN\" }));\n        }}\n        title=\"Go to Login\"\n      />\n      */}\n      <MyButtons.LinkButton\n        text=\"Log In\"\n        onPress={async () => {\n          dispatch(Actions.goToScreen({ screen: \"LOGIN\" }));\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    paddingTop: 50,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"600\",\n    color: \"#444\",\n    alignSelf: \"center\",\n    paddingBottom: 24,\n  },\n  input: {\n    backgroundColor: \"#fff\",\n    marginBottom: 20,\n    fontSize: 16,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n  },\n});\n","import React, { useEffect, useRef } from \"react\";\nimport { Image, SafeAreaView, Text } from \"react-native\";\nimport { useSelector } from \"react-redux\";\n\nfunction SplashScreen({ appInitializedCallback, refresh }) {\n  const readyRef = useRef(false);\n  const appInitialized = useSelector((state) => {\n    return state.main.appInitialized;\n  });\n\n  if (appInitialized) {\n    readyRef.current = true;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      if (readyRef.current) {\n        appInitializedCallback();\n      }\n    }, refresh);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <SafeAreaView\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"white\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <Text>Parents</Text>\n    </SafeAreaView>\n  );\n}\n\nexport default SplashScreen;\n","import React from \"react\";\nimport { Text } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport DebugScreen from \"./DebugScreen\";\nimport ErrorScreen from \"./ErrorScreen\";\nimport GroupScreen from \"./GroupScreen\";\nimport GroupsScreen from \"./GroupsScreen\";\nimport InitialChooseSchoolsWizard from \"./InitialChooseSchoolsWizard\";\nimport InitialJoinSchoolGroupsScreen from \"./InitialJoinSchoolGroupsScreen\";\n\nexport default function UserScreen({ navigation }) {\n  const userInfo = useSelector((state) => state.main.userInfo);\n  const screenWithParams = useSelector((state) => state.screen.userScreen);\n  const screen = screenWithParams.screen;\n\n  if (userInfo == null) {\n    return <Text>Loading User Information...</Text>;\n  } else if (screen == null) {\n    return <Text>error (no screen)</Text>;\n  } else {\n    if (screen == \"PROFILE\") {\n      return <InitialChooseSchoolsWizard />;\n    } else if (screen == \"INITIAL_SELECT_SCHOOL_GROUPS\") {\n      return <InitialJoinSchoolGroupsScreen />;\n    } else if (screen == \"GROUPS\") {\n      return <GroupsScreen />;\n    } else if (screen == \"GROUP\") {\n      return <GroupScreen groupId={screenWithParams.groupId} />;\n    } else if (screen == \"DEBUG\") {\n      return <DebugScreen backAction={screenWithParams.backAction} />;\n    }\n    return <ErrorScreen />;\n  }\n}\n","import * as Notifications from \"expo-notifications\";\nimport React, { useEffect, useRef } from \"react\";\nimport { View } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Actions from \"./Actions\";\nimport * as Controller from \"./Controller\";\nimport DebugScreen from \"./DebugScreen\";\nimport ErrorScreen from \"./ErrorScreen\";\nimport FindGroupsScreen from \"./FindGroupsScreen\";\nimport GroupScreen from \"./GroupScreen\";\nimport GroupsScreen from \"./GroupsScreen\";\nimport InitialChooseSchoolsWizard from \"./InitialChooseSchoolsWizard\";\nimport InitialJoinSchoolGroupsScreen from \"./InitialJoinSchoolGroupsScreen\";\nimport LoginScreen from \"./LoginScreen\";\nimport Messages from \"./Messages\";\nimport MessageScreen from \"./MessageScreen\";\nimport MyProfileModal from \"./MyProfileModal\";\nimport MyProfileScreen from \"./MyProfileScreen\";\nimport OrgScreen from \"./OrgScreen\";\nimport PostScreen from \"./PostScreen\";\nimport SchoolScreen from \"./SchoolScreen\";\nimport SignupScreen from \"./SignupScreen\";\nimport SplashScreen from \"./SplashScreen\";\nimport UserScreen from \"./UserScreen\";\n\n/*\nApp vision:  The local social network for parents.\nWhen join you put in your zip code (we also detect based on gps coordinates)\nYou get suggested groups of parents that you can join:\nGreenwich parents of infants\nGreenwich parents of toddlers\nNorth Mianus Elementary Parents\n\nPeople can also create ephemeral private groups \n\nInside the groups you can \n  write a post\n  create a calendar invite\n  create a poll\n  create a sign up (a la signup genius)\n\n\n*/\n\nfunction RootApp(props, state) {\n  //const x = { a: \"b\" };\n  //x.b.c = \"z\";\n  const dispatch = useDispatch();\n  const notificationListener = useRef();\n  const responseListener = useRef();\n  const appState = useSelector((state) => {\n    return state;\n  });\n\n  //return <TestImagePicker />;\n  //return <TestDatePicker />;\n  //return <TestBook />;\n  //return <TestImagePickerFirebase />;\n  //return <TestICal />;\n  useEffect(async () => {\n    try {\n      return await Controller.initializeApp(dispatch, notificationListener, responseListener);\n    } catch (error) {\n      dispatch(Actions.goToScreen({ screen: \"ERROR\", error }));\n    }\n  }, []);\n\n  const lastNotificationResponse = Notifications.useLastNotificationResponse();\n  useEffect(() => {\n    if (lastNotificationResponse) {\n      const groupId = lastNotificationResponse.notification?.request?.content?.data?.groupId;\n      if (groupId != null) {\n        dispatch(Actions.goToScreen({ screen: \"GROUP\", groupId }));\n      }\n    } else {\n    }\n  }, [lastNotificationResponse]);\n\n  if (!appState.main.appInitialized == \"SPLASH\") {\n    return <SplashScreen appInitializedCallback={() => {}} refresh={2200} />;\n  }\n\n  const screenWithParams = useSelector((state) => state.screen.screen);\n  let screen = screenWithParams?.screen;\n\n  const modalWithParams = useSelector((state) => {\n    return state.screen?.modal;\n  });\n  let modal = modalWithParams?.modal;\n\n  if (screen === \"LOGIN\") {\n    return <LoginScreen dispatch={dispatch} />;\n  } else if (screen === \"SIGNUP\") {\n    return <SignupScreen />;\n  }\n\n  if (appState.main.userInfo == null) {\n    return <LoginScreen />;\n  }\n\n  let render = null;\n  if (screen === \"USER\") {\n    render = <UserScreen />;\n  } else if (screen == \"INITIAL_SELECT_SCHOOLS\") {\n    render = <InitialChooseSchoolsWizard />;\n  } else if (screen == \"INITIAL_SELECT_SCHOOL_GROUPS\") {\n    render = <InitialJoinSchoolGroupsScreen />;\n  } else if (screen == \"GROUPS\" || screen == null) {\n    render = <GroupsScreen />;\n  } else if (screen == \"GROUP\") {\n    render = <GroupScreen groupId={screenWithParams.groupId} />;\n  } else if (screen == \"FIND_GROUPS\") {\n    render = <FindGroupsScreen />;\n  } else if (screen == \"SCHOOL\") {\n    render = <SchoolScreen schoolId={screenWithParams.schoolId} />;\n  } else if (screen == \"POST\") {\n    render = <PostScreen messageId={screenWithParams.messageId} />;\n  } else if (screen == \"ORG\") {\n    render = <OrgScreen orgId={screenWithParams.orgId} />;\n  } else if (screen == \"MY_PROFILE\") {\n    render = <MyProfileScreen />;\n  } else if (screen == \"MESSAGE\") {\n    render = (\n      <MessageScreen groupId={screenWithParams.groupId} messageId={screenWithParams.messageId} />\n    );\n  } else if (screen == \"DEBUG\") {\n    render = <DebugScreen backAction={screenWithParams.backAction} />;\n  } else if (screen == \"ERROR\") {\n    render = <ErrorScreen error={screenWithParams.error} />;\n  } else {\n    render = <ErrorScreen error={{ message: \"No screen\" }} />;\n  }\n\n  return (\n    <View style={{ flex: 1 }}>\n      {render}\n      <Messages key=\"messages\" />\n      <MyProfileModal visible={modal === \"MY_PROFILE\"} />\n    </View>\n  );\n}\n\nexport default RootApp;\n","import { Provider } from \"react-redux\";\n\nimport { collection, doc, setDoc } from \"firebase/firestore/lite\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Text } from \"react-native\";\nimport { db } from \"./config/firebase\";\nimport { SafeAreaProvider, useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport store from \"./Actions\";\nimport RootApp from \"./RootApp\";\nimport * as Notifications from \"expo-notifications\";\nimport * as Actions from \"./Actions\";\n//import ErrorBoundary from \"./ErrorBoundary\";\n\nimport { Alert } from \"react-native\";\nimport RNRestart from \"react-native-restart\";\nimport { setJSExceptionHandler, setNativeExceptionHandler } from \"react-native-exception-handler\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport ErrorScreen from \"./ErrorScreen\";\nimport * as Database from \"./Database\";\n\n/*\nsetNativeExceptionHandler((errorString) => {\n  //You can do something like call an api to report to dev team here\n  // When you call setNativeExceptionHandler, react-native-exception-handler sets a\n  // Native Exception Handler popup which supports restart on error in case of android.\n  // In case of iOS, it is not possible to restart the app programmatically, so we just show an error popup and close the app.\n  // To customize the popup screen take a look at CUSTOMIZATION section.\n});\n*/\n\nconst myErrorHandler = (error, info) => {\n  //Database.logError(error, info);\n  console.log(\"error: \" + error + \", info: \" + JSON.stringify(info));\n};\n\n//foreground notifications settings\n//alert('setting notification handler');\nNotifications.setNotificationHandler({\n  handleNotification: async (notification) => {\n    return {\n      shouldShowAlert: false,\n      shouldPlaySound: false,\n      shouldSetBadge: false,\n    };\n  },\n});\n\nexport default function App() {\n  /*\n  return (\n    <ErrorBoundary\n      fallbackRender={({ error, resetErrorBoundary }) => {\n        return <ErrorScreen error={error} resetErrorBoundary={resetErrorBoundary} />;\n      }}\n      onError={myErrorHandler}\n    >\n      <SafeAreaProvider>\n        <Provider store={store}>\n          <RootApp />\n        </Provider>\n      </SafeAreaProvider>\n    </ErrorBoundary>\n  );\n  */\n  return (\n    <SafeAreaProvider>\n      <Provider store={store}>\n        <RootApp />\n      </Provider>\n    </SafeAreaProvider>\n  );\n}\n","var map = {\n\t\"./af\": 164,\n\t\"./af.js\": 164,\n\t\"./ar\": 165,\n\t\"./ar-dz\": 166,\n\t\"./ar-dz.js\": 166,\n\t\"./ar-kw\": 167,\n\t\"./ar-kw.js\": 167,\n\t\"./ar-ly\": 168,\n\t\"./ar-ly.js\": 168,\n\t\"./ar-ma\": 169,\n\t\"./ar-ma.js\": 169,\n\t\"./ar-sa\": 170,\n\t\"./ar-sa.js\": 170,\n\t\"./ar-tn\": 171,\n\t\"./ar-tn.js\": 171,\n\t\"./ar.js\": 165,\n\t\"./az\": 172,\n\t\"./az.js\": 172,\n\t\"./be\": 173,\n\t\"./be.js\": 173,\n\t\"./bg\": 174,\n\t\"./bg.js\": 174,\n\t\"./bm\": 175,\n\t\"./bm.js\": 175,\n\t\"./bn\": 176,\n\t\"./bn-bd\": 177,\n\t\"./bn-bd.js\": 177,\n\t\"./bn.js\": 176,\n\t\"./bo\": 178,\n\t\"./bo.js\": 178,\n\t\"./br\": 179,\n\t\"./br.js\": 179,\n\t\"./bs\": 180,\n\t\"./bs.js\": 180,\n\t\"./ca\": 181,\n\t\"./ca.js\": 181,\n\t\"./cs\": 182,\n\t\"./cs.js\": 182,\n\t\"./cv\": 183,\n\t\"./cv.js\": 183,\n\t\"./cy\": 184,\n\t\"./cy.js\": 184,\n\t\"./da\": 185,\n\t\"./da.js\": 185,\n\t\"./de\": 186,\n\t\"./de-at\": 187,\n\t\"./de-at.js\": 187,\n\t\"./de-ch\": 188,\n\t\"./de-ch.js\": 188,\n\t\"./de.js\": 186,\n\t\"./dv\": 189,\n\t\"./dv.js\": 189,\n\t\"./el\": 190,\n\t\"./el.js\": 190,\n\t\"./en-au\": 191,\n\t\"./en-au.js\": 191,\n\t\"./en-ca\": 192,\n\t\"./en-ca.js\": 192,\n\t\"./en-gb\": 193,\n\t\"./en-gb.js\": 193,\n\t\"./en-ie\": 194,\n\t\"./en-ie.js\": 194,\n\t\"./en-il\": 195,\n\t\"./en-il.js\": 195,\n\t\"./en-in\": 196,\n\t\"./en-in.js\": 196,\n\t\"./en-nz\": 197,\n\t\"./en-nz.js\": 197,\n\t\"./en-sg\": 198,\n\t\"./en-sg.js\": 198,\n\t\"./eo\": 199,\n\t\"./eo.js\": 199,\n\t\"./es\": 200,\n\t\"./es-do\": 201,\n\t\"./es-do.js\": 201,\n\t\"./es-mx\": 202,\n\t\"./es-mx.js\": 202,\n\t\"./es-us\": 203,\n\t\"./es-us.js\": 203,\n\t\"./es.js\": 200,\n\t\"./et\": 204,\n\t\"./et.js\": 204,\n\t\"./eu\": 205,\n\t\"./eu.js\": 205,\n\t\"./fa\": 206,\n\t\"./fa.js\": 206,\n\t\"./fi\": 207,\n\t\"./fi.js\": 207,\n\t\"./fil\": 208,\n\t\"./fil.js\": 208,\n\t\"./fo\": 209,\n\t\"./fo.js\": 209,\n\t\"./fr\": 210,\n\t\"./fr-ca\": 211,\n\t\"./fr-ca.js\": 211,\n\t\"./fr-ch\": 212,\n\t\"./fr-ch.js\": 212,\n\t\"./fr.js\": 210,\n\t\"./fy\": 213,\n\t\"./fy.js\": 213,\n\t\"./ga\": 214,\n\t\"./ga.js\": 214,\n\t\"./gd\": 215,\n\t\"./gd.js\": 215,\n\t\"./gl\": 216,\n\t\"./gl.js\": 216,\n\t\"./gom-deva\": 217,\n\t\"./gom-deva.js\": 217,\n\t\"./gom-latn\": 218,\n\t\"./gom-latn.js\": 218,\n\t\"./gu\": 219,\n\t\"./gu.js\": 219,\n\t\"./he\": 220,\n\t\"./he.js\": 220,\n\t\"./hi\": 221,\n\t\"./hi.js\": 221,\n\t\"./hr\": 222,\n\t\"./hr.js\": 222,\n\t\"./hu\": 223,\n\t\"./hu.js\": 223,\n\t\"./hy-am\": 224,\n\t\"./hy-am.js\": 224,\n\t\"./id\": 225,\n\t\"./id.js\": 225,\n\t\"./is\": 226,\n\t\"./is.js\": 226,\n\t\"./it\": 227,\n\t\"./it-ch\": 228,\n\t\"./it-ch.js\": 228,\n\t\"./it.js\": 227,\n\t\"./ja\": 229,\n\t\"./ja.js\": 229,\n\t\"./jv\": 230,\n\t\"./jv.js\": 230,\n\t\"./ka\": 231,\n\t\"./ka.js\": 231,\n\t\"./kk\": 232,\n\t\"./kk.js\": 232,\n\t\"./km\": 233,\n\t\"./km.js\": 233,\n\t\"./kn\": 234,\n\t\"./kn.js\": 234,\n\t\"./ko\": 235,\n\t\"./ko.js\": 235,\n\t\"./ku\": 236,\n\t\"./ku.js\": 236,\n\t\"./ky\": 237,\n\t\"./ky.js\": 237,\n\t\"./lb\": 238,\n\t\"./lb.js\": 238,\n\t\"./lo\": 239,\n\t\"./lo.js\": 239,\n\t\"./lt\": 240,\n\t\"./lt.js\": 240,\n\t\"./lv\": 241,\n\t\"./lv.js\": 241,\n\t\"./me\": 242,\n\t\"./me.js\": 242,\n\t\"./mi\": 243,\n\t\"./mi.js\": 243,\n\t\"./mk\": 244,\n\t\"./mk.js\": 244,\n\t\"./ml\": 245,\n\t\"./ml.js\": 245,\n\t\"./mn\": 246,\n\t\"./mn.js\": 246,\n\t\"./mr\": 247,\n\t\"./mr.js\": 247,\n\t\"./ms\": 248,\n\t\"./ms-my\": 249,\n\t\"./ms-my.js\": 249,\n\t\"./ms.js\": 248,\n\t\"./mt\": 250,\n\t\"./mt.js\": 250,\n\t\"./my\": 251,\n\t\"./my.js\": 251,\n\t\"./nb\": 252,\n\t\"./nb.js\": 252,\n\t\"./ne\": 253,\n\t\"./ne.js\": 253,\n\t\"./nl\": 254,\n\t\"./nl-be\": 255,\n\t\"./nl-be.js\": 255,\n\t\"./nl.js\": 254,\n\t\"./nn\": 256,\n\t\"./nn.js\": 256,\n\t\"./oc-lnc\": 257,\n\t\"./oc-lnc.js\": 257,\n\t\"./pa-in\": 258,\n\t\"./pa-in.js\": 258,\n\t\"./pl\": 259,\n\t\"./pl.js\": 259,\n\t\"./pt\": 260,\n\t\"./pt-br\": 261,\n\t\"./pt-br.js\": 261,\n\t\"./pt.js\": 260,\n\t\"./ro\": 262,\n\t\"./ro.js\": 262,\n\t\"./ru\": 263,\n\t\"./ru.js\": 263,\n\t\"./sd\": 264,\n\t\"./sd.js\": 264,\n\t\"./se\": 265,\n\t\"./se.js\": 265,\n\t\"./si\": 266,\n\t\"./si.js\": 266,\n\t\"./sk\": 267,\n\t\"./sk.js\": 267,\n\t\"./sl\": 268,\n\t\"./sl.js\": 268,\n\t\"./sq\": 269,\n\t\"./sq.js\": 269,\n\t\"./sr\": 270,\n\t\"./sr-cyrl\": 271,\n\t\"./sr-cyrl.js\": 271,\n\t\"./sr.js\": 270,\n\t\"./ss\": 272,\n\t\"./ss.js\": 272,\n\t\"./sv\": 273,\n\t\"./sv.js\": 273,\n\t\"./sw\": 274,\n\t\"./sw.js\": 274,\n\t\"./ta\": 275,\n\t\"./ta.js\": 275,\n\t\"./te\": 276,\n\t\"./te.js\": 276,\n\t\"./tet\": 277,\n\t\"./tet.js\": 277,\n\t\"./tg\": 278,\n\t\"./tg.js\": 278,\n\t\"./th\": 279,\n\t\"./th.js\": 279,\n\t\"./tk\": 280,\n\t\"./tk.js\": 280,\n\t\"./tl-ph\": 281,\n\t\"./tl-ph.js\": 281,\n\t\"./tlh\": 282,\n\t\"./tlh.js\": 282,\n\t\"./tr\": 283,\n\t\"./tr.js\": 283,\n\t\"./tzl\": 284,\n\t\"./tzl.js\": 284,\n\t\"./tzm\": 285,\n\t\"./tzm-latn\": 286,\n\t\"./tzm-latn.js\": 286,\n\t\"./tzm.js\": 285,\n\t\"./ug-cn\": 287,\n\t\"./ug-cn.js\": 287,\n\t\"./uk\": 288,\n\t\"./uk.js\": 288,\n\t\"./ur\": 289,\n\t\"./ur.js\": 289,\n\t\"./uz\": 290,\n\t\"./uz-latn\": 291,\n\t\"./uz-latn.js\": 291,\n\t\"./uz.js\": 290,\n\t\"./vi\": 292,\n\t\"./vi.js\": 292,\n\t\"./x-pseudo\": 293,\n\t\"./x-pseudo.js\": 293,\n\t\"./yo\": 294,\n\t\"./yo.js\": 294,\n\t\"./zh-cn\": 295,\n\t\"./zh-cn.js\": 295,\n\t\"./zh-hk\": 296,\n\t\"./zh-hk.js\": 296,\n\t\"./zh-mo\": 297,\n\t\"./zh-mo.js\": 297,\n\t\"./zh-tw\": 298,\n\t\"./zh-tw.js\": 298\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 478;"],"sourceRoot":""}